<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bash on Asterisk, and other worldly endeavours</title>
    <link>http://blog.leifmadsen.com/tags/bash/</link>
    <description>Recent content in Bash on Asterisk, and other worldly endeavours</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Sep 2015 21:20:40 +0000</lastBuildDate>
    <atom:link href="http://blog.leifmadsen.com/tags/bash/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Configuring powerline to show working Git branch</title>
      <link>http://blog.leifmadsen.com/blog/2015/09/09/configuring-powerline-to-show-working-git-branch/</link>
      <pubDate>Wed, 09 Sep 2015 21:20:40 +0000</pubDate>
      
      <guid>http://blog.leifmadsen.com/blog/2015/09/09/configuring-powerline-to-show-working-git-branch/</guid>
      <description>So the documentation for Powerline kind of sucks. I followed this pretty good article on getting started with it. First thing I noticed however is that the if statement on the article doesn&rsquo;t work if you don&rsquo;t have powerline installed (which kind of defeats the purpose of having the if statement there at all). # if powerline is installed, then use it command -v powerline-daemon &amp;&gt;/dev/null if [ $? -eq 0 ]; then powerline-daemon -q POWERLINE_BASH_CONTINUATION=1 POWERLINE_BASH_SELECT=1 .</description>
    </item>
    
    <item>
      <title>Selecting Chef Servers With Environment Variables</title>
      <link>http://blog.leifmadsen.com/blog/2012/08/22/selecting-chef-servers-with-environment-variables/</link>
      <pubDate>Wed, 22 Aug 2012 18:49:43 +0000</pubDate>
      
      <guid>http://blog.leifmadsen.com/blog/2012/08/22/selecting-chef-servers-with-environment-variables/</guid>
      <description>Today I got playing around with dynamically selecting different chef servers in preparation for migrating some of our nodes away from our chef-dev server to our chef-live server (which I&rsquo;m currently in the process of building and populating with data). I had been talking in the #chef IRC channel a few weeks back about making things dynamic, or at least easily switchable, when using multiple chef servers for different groups of servers in an environment.</description>
    </item>
    
    <item>
      <title>bash creating files named &#39;1&#39; everywhere!</title>
      <link>http://blog.leifmadsen.com/blog/2012/07/19/bash-creating-files-named-1-everywhere/</link>
      <pubDate>Thu, 19 Jul 2012 15:03:05 +0000</pubDate>
      
      <guid>http://blog.leifmadsen.com/blog/2012/07/19/bash-creating-files-named-1-everywhere/</guid>
      <description>So I ran into something kind of stupid today :) Adding a little note for anyone who might run into a similar instance. I have some ssh-add stuff that gets run in my .bashrc file, but when I was outputting it, I was doing: ssh-add ~/.ssh/some_key &gt; /dev/null 2&amp;&gt;1 Note the 2&amp;&gt;1 at the end. That means to redirect output to a file named 1. You need to flip the</description>
    </item>
    
    <item>
      <title>rpmlint non-utf8-spec-file error</title>
      <link>http://blog.leifmadsen.com/blog/2012/02/23/rpmlint-non-utf8-spec-file-error/</link>
      <pubDate>Thu, 23 Feb 2012 18:43:54 +0000</pubDate>
      
      <guid>http://blog.leifmadsen.com/blog/2012/02/23/rpmlint-non-utf8-spec-file-error/</guid>
      <description>I&rsquo;ve been doing a bunch of work with RPMs lately, and while running rpmlint against a spec file I was modifying, I received this error: myfile.spec: E: non-utf8-spec-file myfile.spec After Googling, I ran into a way of finding the non-compliant characters. $ iconv -f ISO-8859-8 -t UTF-8 myfile.spec &gt; converted.spec $ diff -u myfile.spec converted.spec (Answer thanks to Dominique Leuenberger @ http://lists.opensuse.org/opensuse-packaging/2011-04/msg00005.html)</description>
    </item>
    
    <item>
      <title>.bashrc trick for git repo and branch information</title>
      <link>http://blog.leifmadsen.com/blog/2011/12/22/.bashrc-trick-for-git-repo-and-branch-information/</link>
      <pubDate>Thu, 22 Dec 2011 14:39:07 +0000</pubDate>
      
      <guid>http://blog.leifmadsen.com/blog/2011/12/22/.bashrc-trick-for-git-repo-and-branch-information/</guid>
      <description>The other day I was talking to my friend Russell Bryant who pointed me to some .bashrc magic that would show me which branch I was currently working with inside a git repo on my system. I found it incredibly handy and have modified the ANSI colour coding slightly. export PS1='[\u@\h \[33[0;36m\]\W$(__git_ps1 &quot;\[33[0m\]\[33[0;33m\](%s)&quot;)\[33[0m\]]\$ ' On Fedora Russell mentioned that you need the bash-completion installed. We&rsquo;re unsure if you need anything on other distributions.</description>
    </item>
    
    <item>
      <title>Return just PID of script with &#39;ps&#39; and &#39;awk&#39;</title>
      <link>http://blog.leifmadsen.com/blog/2011/09/15/return-just-pid-of-script-with-ps-and-awk/</link>
      <pubDate>Thu, 15 Sep 2011 12:34:35 +0000</pubDate>
      
      <guid>http://blog.leifmadsen.com/blog/2011/09/15/return-just-pid-of-script-with-ps-and-awk/</guid>
      <description>Today I ran into an issue where I am running a python script that I needed to get the process ID (PID) of, but that the process was being output with a space between &lsquo;python&rsquo; and the actual script name (in this case, jiraircbot.py). I&rsquo;m sure it&rsquo;s totally overkill and there is a much easier way I didn&rsquo;t find to do this, but after some scouring of The Google, I found something that works!</description>
    </item>
    
  </channel>
</rss>
