<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Asterisk, and other worldly endeavours</title>
    <link>http://leifmadsen.github.io/hugo_gh_blog/tags/git/</link>
    <description>Recent content in Git on Asterisk, and other worldly endeavours</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Jun 2012 12:51:30 +0000</lastBuildDate>
    <atom:link href="http://leifmadsen.github.io/hugo_gh_blog/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Integration Testing Using Jenkins (Part 1)</title>
      <link>http://leifmadsen.github.io/hugo_gh_blog/blog/2012/06/26/integration-testing-using-jenkins-part-1/</link>
      <pubDate>Tue, 26 Jun 2012 12:51:30 +0000</pubDate>
      
      <guid>http://leifmadsen.github.io/hugo_gh_blog/blog/2012/06/26/integration-testing-using-jenkins-part-1/</guid>
      <description>&lt;p&gt;So for the last week or so, I&amp;rsquo;ve been tasked at &lt;a href=&#34;http://www.coredial.com&#34;&gt;CoreDial&lt;/a&gt; with adding our own set of integration testing now that we&amp;rsquo;re moving to a more formal deployment method using &lt;a href=&#34;http://wiki.opscode.com/display/chef/Home&#34;&gt;chef&lt;/a&gt;. After much pestering of questions to &lt;a href=&#34;https://github.com/thehar&#34;&gt;thehar&lt;/a&gt; of &lt;a href=&#34;https://www.mylookout.com/&#34;&gt;Lookout Mobile Security&lt;/a&gt; and with help of Google, #chef and jhansche in #jenkins I&amp;rsquo;ve finally got a nice clean proof of concept that we can evaluate and likely deploy.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll come back later with another article on my installation issues with jenkins and the solutions that I solved (nothing too terribly complicated), but what I wanted to blog about was the two types of tests that I&amp;rsquo;ve been focusing on and was able to finally solve.&lt;/p&gt;

&lt;p&gt;First, I wanted to simply get a working test going in &lt;a href=&#34;http://jenkins-ci.org/&#34;&gt;jenkins&lt;/a&gt; since I&amp;rsquo;d never used it before and needed a minimum viable product to look at. Based on a recommendation from thehar a couple weeks ago, I looked at &lt;a href=&#34;http://acrmp.github.com/foodcritic/&#34;&gt;foodcritic&lt;/a&gt;, got that working, and with their instructions, was able to get that integrated for my first automated test in jenkins.&lt;/p&gt;

&lt;p&gt;The main problem I had was really getting an environment path variable set so that I could execute a ruby shell (&lt;code&gt;#!/usr/bin/env rvm-shell 1.9.3&lt;/code&gt;, in the foodcritic instructions). After some searching, I came across a hint (sorry, I&amp;rsquo;ve misplaced the link) that stated I needed to add &lt;code&gt;source /etc/profile&lt;/code&gt; to the bottom of my /etc/default/jenkins file, which worked marvellously to get the command I was trying to run to go. (Note that I installed on Ubuntu 12.04 for this test.)&lt;/p&gt;

&lt;p&gt;(Prior to that, I installed &lt;a href=&#34;https://rvm.io/rvm/install/&#34;&gt;rvm&lt;/a&gt; and then ran the multi-user instructions to get ruby 1.9.3 installed. I also installed foodcritic via &lt;code&gt;gem install foodcritic&lt;/code&gt; which depends on ruby 1.9.2+.)&lt;/p&gt;

&lt;p&gt;Having created my first job, I filled in the Git information to connect to my git server. I ran into a few issues there, and needed to create a new .ssh directory in /var/lib/jenkins/.ssh/ (/var/lib/jenkins is the $HOME directory of jenkins). I then placed the appropriate authentication keys in the directory, but was still having issues with connecting to the server. It ended up being that I needed to add a &lt;code&gt;config&lt;/code&gt; file to the .ssh directory with the following contents:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Host coredial-git
  HostName gitserver.hostname.com
  User git
  IdentityFile /var/lib/jenkins/.ssh/id_rsa.key
  StrictHostKeyChecking no
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After adding this, then I could set the repository URL to &lt;code&gt;git@coredial-git:chef-repo.git&lt;/code&gt; and the branch specifier to something like &lt;code&gt;*/feature/ENG-*&lt;/code&gt; in order to test all our engineering testing branches. I then setup &lt;strong&gt;Poll SCM&lt;/strong&gt; with polling schedule &lt;code&gt;*/5 * * * *&lt;/code&gt; (I set to */1 at first for testing, and will likely increase this further, or add a post-commit hook to git.)&lt;/p&gt;

&lt;p&gt;The actual command I&amp;rsquo;m running in the Execute Shell section looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;#!/usr/bin/env rvm-shell 1.9.3
foodcritic -f any site-cookbooks/my_awesome_cookbook
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I saved the test, made some changes, and during the poll was able to trigger off both expected failed and expected passing tests. Very cool indeed!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>.bashrc trick for git repo and branch information</title>
      <link>http://leifmadsen.github.io/hugo_gh_blog/blog/2011/12/22/.bashrc-trick-for-git-repo-and-branch-information/</link>
      <pubDate>Thu, 22 Dec 2011 14:39:07 +0000</pubDate>
      
      <guid>http://leifmadsen.github.io/hugo_gh_blog/blog/2011/12/22/.bashrc-trick-for-git-repo-and-branch-information/</guid>
      <description>&lt;p&gt;The other day I was talking to my friend &lt;a href=&#34;http://russellbryant.net&#34;&gt;Russell Bryant&lt;/a&gt; who pointed me to some .bashrc magic that would show me which branch I was currently working with inside a git repo on my system. I found it incredibly handy and have modified the ANSI colour coding slightly.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PS1=&#39;[\u@\h \[33[0;36m\]\W$(__git_ps1 &amp;quot;\[33[0m\]\[33[0;33m\](%s)&amp;quot;)\[33[0m\]]\$ &#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On Fedora Russell mentioned that you need the &lt;code&gt;bash-completion&lt;/code&gt; installed. We&amp;rsquo;re unsure if you need anything on other distributions.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Edit: January 6, 2012_
As I&amp;rsquo;m using my laptop today, I modified the .bashrc file on Ubuntu 10.04, and here is the PS1 code I came up with. It&amp;rsquo;s nearly the same, but I&amp;rsquo;m using bold today instead of the unbolded colours of lore.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PS1=&#39;${debian_chroot:+($debian_chroot)}\[\033[28;01m\]\u@\h\[\033[00m\]:\[\033[1;36m\]\W$(__git_ps1 &amp;quot;\[\033[00m\]\[\033[1;33m\](%s)&amp;quot;)\[\033[00m\]\$ &#39;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>