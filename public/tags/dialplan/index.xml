<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dialplan on Asterisk, and other worldly endeavours</title>
    <link>http://blog.leifmadsen.com/tags/dialplan/</link>
    <description>Recent content in Dialplan on Asterisk, and other worldly endeavours</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 16 Jan 2012 13:28:10 +0000</lastBuildDate>
    <atom:link href="http://blog.leifmadsen.com/tags/dialplan/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Converting multiple exten =&gt; lines to using same =&gt; in Asterisk dialplan</title>
      <link>http://blog.leifmadsen.com/blog/2012/01/16/converting-multiple-exten--lines-to-using-same--in-asterisk-dialplan/</link>
      <pubDate>Mon, 16 Jan 2012 13:28:10 +0000</pubDate>
      
      <guid>http://blog.leifmadsen.com/blog/2012/01/16/converting-multiple-exten--lines-to-using-same--in-asterisk-dialplan/</guid>
      <description>&lt;p&gt;Last week I wanted to start changing some 1.4 based Asterisk dialplan to a 1.8 based Asterisk system, and in that process wanted to convert lines like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exten =&amp;gt; _NXXNXXXXXX,1,NoOp()
exten =&amp;gt; _NXXNXXXXXX,2,GotoIf($[...]?reject,1)
exten =&amp;gt; _NXXNXXXXXX,3,Dial(SIP/foo/${EXTEN})
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;into using the same =&amp;gt; prefix:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exten =&amp;gt; _NXXNXXXXXX,1,NoOp()
 same =&amp;gt; n,GotoIf($[...]?reject,1)
 same =&amp;gt; n,Dial(SIP/foo/${EXTEN})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to do that, &lt;a href=&#34;https://twitter.com/#!/mikemking&#34;&gt;Mike King&lt;/a&gt; helped me out with the following regular expressing which I used in vim:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;%s/exten\s*=&amp;gt;\s*[^,]\+,\s*[n2-9]/ same =&amp;gt; n/g
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cooking With Asterisk (Video)</title>
      <link>http://blog.leifmadsen.com/blog/2011/12/23/cooking-with-asterisk-video/</link>
      <pubDate>Fri, 23 Dec 2011 16:17:57 +0000</pubDate>
      
      <guid>http://blog.leifmadsen.com/blog/2011/12/23/cooking-with-asterisk-video/</guid>
      <description>&lt;p&gt;And I found the Cooking With Asterisk presentation as well! Apologies for the low quality on the video (as this one has a lot more text than the Distributed Call Centre video), but you can follow along with the presentation on your screen as available on my website at:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://leifmadsen.com/sites/default/files/AstriCon%202011%20-%20Cooking%20With%20Asterisk.pdf&#34;&gt;http://leifmadsen.com/sites/default/files/AstriCon%202011%20-%20Cooking%20With%20Asterisk.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The video presentation is available here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.tmcnet.com/tmc/videos/default.aspx?vid=5741&amp;amp;title=Cooking+with+Asterisk#&#34;&gt;http://www.tmcnet.com/tmc/videos/default.aspx?vid=5741&amp;amp;title=Cooking+with+Asterisk#&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Dialplan Functions: AES_DECRYPT() and AES_ENCRYPT()</title>
      <link>http://blog.leifmadsen.com/blog/2011/09/09/using-dialplan-functions-aes_decrypt-and-aes_encrypt/</link>
      <pubDate>Fri, 09 Sep 2011 13:28:47 +0000</pubDate>
      
      <guid>http://blog.leifmadsen.com/blog/2011/09/09/using-dialplan-functions-aes_decrypt-and-aes_encrypt/</guid>
      <description>&lt;p&gt;I  recently asked on twitter how many people would be interested in a set of blog posts that focused on how to use the various dialplan functions in Asterisk, and I got quite a positive response. I posted that shortly before getting married, and now that I&amp;rsquo;m back into the groove of things, I&amp;rsquo;m going to take a shot at posting a bunch of content focused around Asterisk dialplan functions. If you don&amp;rsquo;t know what Asterisk dialplan functions are, head on over to the online version of &lt;a href=&#34;http://ofps.oreilly.com/titles/9780596517342/index.html&#34;&gt;Asterisk: The Definitive Guide (3rd edition)&lt;/a&gt; (or &lt;a href=&#34;http://www.amazon.com/Asterisk-Definitive-Guide-Guides/dp/0596517343/ref=sr_1_1?ie=UTF8&amp;amp;qid=1315572209&amp;amp;sr=8-1&#34;&gt;buy&lt;/a&gt; it) and read the section on &lt;a href=&#34;http://ofps.oreilly.com/titles/9780596517342/asterisk-DP-Deeper.html#asterisk-CHP-6-SECT-2&#34;&gt;dialplan functions&lt;/a&gt;. If you&amp;rsquo;re still starting out with Asterisk, I highly suggest you start with the &lt;a href=&#34;http://ofps.oreilly.com/titles/9780596517342/asterisk-DP-Basics.html&#34;&gt;dialplan basics&lt;/a&gt; chapter.&lt;/p&gt;

&lt;p&gt;Today we&amp;rsquo;ll look at the first 2 dialplan functions in my list: &lt;code&gt;AES_DECRYPT()&lt;/code&gt; and &lt;code&gt;AES_ENCRYPT()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The AES_DECRYPT() and AES_ENCRYPT() functions work by passing strings to the functions, and they return a result. If you pass an unencrypted string to the AES_ENCRYPT() function it will return an encrypted string; vice-versa for the AES_DECRYPT() function. The two functions operate by passing a string and a key where the result is encoded  in base64.&lt;/p&gt;

&lt;p&gt;Use case for these functions probably makes the most sense when you need to store data outside of the dialplan, perhaps passwords, pins, or other data passed in by the caller, but which you want to secure when you go to store it. Let&amp;rsquo;s take an example where we create some dialplan that allows a caller to set their pin and store it in the database. For the sake of simplicity I&amp;rsquo;m not going to add any error checking (like to verify we really have data to work with, allow the caller to verify their extension, etc.):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exten =&amp;gt; *88,1,NoOp()
 same =&amp;gt; n,Playback(silence/1)
 same =&amp;gt; n,Read(UserExtension,extension,3)                  ; read persons 3 digit extension unmber
 same =&amp;gt; n,Verbose(2,Extension number: ${UserExtension})
 same =&amp;gt; n,Read(PinEntry,agent-pass)                        ; ask for a pin number
 same =&amp;gt; n,Verbose(2,Pin number: ${PinEntry})
 same =&amp;gt; n,SayDigits(${PinEntry})                           ; say pin back to caller
 same =&amp;gt; n,Set(DB(pin/${UserExtension})=${PinEntry})        ; store pin in the AstDB
 same =&amp;gt; n,Playback(vm-goodbye)
 same =&amp;gt; n,Hangup()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the user enters their extension and pin, we store it in the AstDB. We can verify it was stored correctly by checking from the Asterisk CLI:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scrappy*CLI&amp;gt; database show pin
/pin/100 : 1234
1 results found.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s modify our dialplan to store the pin in the database using a value returned from &lt;code&gt;AES_ENCRYPT()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exten =&amp;gt; *88,1,NoOp()
 same =&amp;gt; n,Playback(silence/1)
 same =&amp;gt; n,Read(UserExtension,extension,3)
 same =&amp;gt; n,Verbose(2,Extension number: ${UserExtension})
 same =&amp;gt; n,Read(PinEntry,agent-pass)
 same =&amp;gt; n,Verbose(2,Pin number: ${PinEntry})
 same =&amp;gt; n,SayDigits(${PinEntry})
 same =&amp;gt; n,Set(SpecialKey=1234qwerasdfzxcv)
 same =&amp;gt; n,Set(EncryptedPin=${AES_ENCRYPT(${SpecialKey},${PinEntry})})
 same =&amp;gt; n,Set(DB(pin/${UserExtension})=${EncryptedPin})
 same =&amp;gt; n,Playback(vm-goodbye)
 same =&amp;gt; n,Hangup()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we can see the encoded string stored in the database:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scrappy*CLI&amp;gt; database show pin
/pin/100 : Je2G/qyHuGVKgvvXDwXjHA==
1 results found.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course anyone who has access to the AstDB from the Asterisk CLI is also going to have access to the Asterisk dialplan, so you&amp;rsquo;ll have to do a better job than I have here of hiding the secret key being used for encrypting the data. Really all we&amp;rsquo;re trying to do here is not make the list of pins and data in our AstDB quite so obvious. We could of course not use AstDB at all, and store the data remotely where we know people will have access to the data, but not access to the secret key on our Asterisk server.&lt;/p&gt;

&lt;p&gt;Now lets look at the inverse by decoding the pin to authenticate someone.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exten =&amp;gt; *77,1,NoOp()
 same =&amp;gt; n,Playback(silence/1)
 same =&amp;gt; n,Read(UserExtension,extension,3)                     ; get users extension
 same =&amp;gt; n,Set(EncryptedPin=${DB(pin/${UserExtension})})       ; get encrypted pin from AstDB
 same =&amp;gt; n,Read(PinEntry,agent-pass)                           ; get pin from user
 same =&amp;gt; n,Set(SpecialKey=1234qwerasdfzxcv)
 same =&amp;gt; n,Set(DecryptedPin=${AES_DECRYPT(${SpecialKey},${EncryptedPin})})                          ; decrypt the pin
 same =&amp;gt; n,Playback(${IF($[&amp;quot;${PinEntry}&amp;quot; = &amp;quot;${DecryptedPin}&amp;quot;]?pin-number-accepted:pin-invalid)})    ; if pin is correct, play number accepted, else, pin invalid
 same =&amp;gt; n,Playback(vm-goodbye)
 same =&amp;gt; n,Hangup()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it for now. Leave a comment if you like this format, and if you found this article useful. Thanks!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Set() and Goto() on same line</title>
      <link>http://blog.leifmadsen.com/blog/2011/08/13/set-and-goto-on-same-line/</link>
      <pubDate>Sat, 13 Aug 2011 02:14:55 +0000</pubDate>
      
      <guid>http://blog.leifmadsen.com/blog/2011/08/13/set-and-goto-on-same-line/</guid>
      <description>&lt;p&gt;(Thanks to Jared Smith for answering my question in IRC which is the inspiration for this post.)&lt;/p&gt;

&lt;p&gt;Typically when I write dialplan, primarily in the case where I&amp;rsquo;m using a pattern match, I&amp;rsquo;ll save the dialed extension to a channel variable using &lt;code&gt;Set()&lt;/code&gt;, then do a &lt;code&gt;Goto()&lt;/code&gt; where the call logic is handled. The &lt;code&gt;Set()&lt;/code&gt; is so that I don&amp;rsquo;t lose the value of &lt;code&gt;${EXTEN}&lt;/code&gt; throughout the dialplan process, especially if I&amp;rsquo;m using other mechanics such as &lt;code&gt;GoSub()&lt;/code&gt; and others.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been doing this on two or three lines like this (usually three because I like using a &lt;code&gt;NoOp()&lt;/code&gt; or &lt;code&gt;Verbose()&lt;/code&gt; for the first priority):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exten =&amp;gt; _NXXNXXXXXX,1,NoOp()
   same =&amp;gt; n,Set(DialedExtension=${EXTEN})
   same =&amp;gt; n,Goto(CallHandler,1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is kind of annoying for each pattern match, especially if you&amp;rsquo;re going to do multiple. Here is a legitimate example of the &lt;code&gt;CallHandler&lt;/code&gt; extension:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exten =&amp;gt; _NXXNXXXXXX,1,NoOp()
   same =&amp;gt; n,Set(DialedExtension=${EXTEN})
   same =&amp;gt; n,Goto(CallHandler,1)

exten =&amp;gt; _1NXXNXXXXXX,1,NoOp()
   same =&amp;gt; n,Set(DialedExtension=${EXTEN})
   same =&amp;gt; n,Goto(CallHandler,1)

exten =&amp;gt; _NXXXXXX,1,NoOp()
   same =&amp;gt; n,Set(DialedExtension=${EXTEN})
   same =&amp;gt; n,Goto(CallHandler,1)

exten =&amp;gt; CallHandler,1,NoOp()
   same =&amp;gt; n,Dial(${GLOBAL(PSTN_CONNECTION)}/${DialedExtension},30)
   same =&amp;gt; n,Hangup()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s a bit annoying having to either type out the same type of logic multiple times, even if it&amp;rsquo;s only 2-3 lines (even if you just copy and paste the &lt;code&gt;same =&amp;gt;&lt;/code&gt; lines it&amp;rsquo;s a bit better, but still not ideal). So here&amp;rsquo;s a solution to the same problem of multiple pattern matches and doing a &lt;code&gt;Goto()&lt;/code&gt; our &lt;code&gt;CallHandler&lt;/code&gt; extension.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exten =&amp;gt; _NXXNXXXXXX,1,GotoIf($[${EXISTS(${SET(DialedExtension=${EXTEN})})}]?CallHandler,1:i,1)
exten =&amp;gt; _1NXXNXXXXXX,1,GotoIf($[${EXISTS(${SET(DialedExtension=${EXTEN})})}]?CallHandler,1:i,1)
exten =&amp;gt; _NXXXXXX,1,GotoIf($[${EXISTS(${SET(DialedExtension=${EXTEN})})}]?CallHandler,1:i,1)

exten =&amp;gt; CallHandler,1,NoOp()
   same =&amp;gt; n,Dial(${GLOBAL(PSTN_CONNECTION)}/${DialedExtension},30)
   same =&amp;gt; n,Hangup()

exten =&amp;gt; i,1,Congestion()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While both ways are perfectly reasonable (and some may argue the more verbose method is easier to read), I like embedding dialplan into a single line when I can as I find it easier to maintain. I&amp;rsquo;m also pretty good at knowing how many brackets to end with when nesting functions, but not everyone is comfortable doing that; in those cases you should probably break it out to multiple lines in order to save debugging time. Both methods are perfectly valid, so enjoy using whichever you prefer!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Asterisk: The Definitive Guide, First Draft Complete!</title>
      <link>http://blog.leifmadsen.com/blog/2011/01/12/asterisk-the-definitive-guide-first-draft-complete/</link>
      <pubDate>Wed, 12 Jan 2011 01:30:09 +0000</pubDate>
      
      <guid>http://blog.leifmadsen.com/blog/2011/01/12/asterisk-the-definitive-guide-first-draft-complete/</guid>
      <description>&lt;p&gt;Today we marked the finishing of Asterisk: The Definitive Guide (3rd Edition) by sending the first draft off to the O&amp;rsquo;Reilly production team. We finished nearly on schedule (within a few days, which is remarkable considering we added 150 more pages than originally intentioned) and have our favourite copy editor Rachel Head (formerly Wheeler) who did the first edition of Asterisk: The Future of Telephony who we emphatically enjoyed working with. We&amp;rsquo;re looking forward to it again.&lt;/p&gt;

&lt;p&gt;With the draft done now, and the copy sent off to production to do their magic, I&amp;rsquo;m not quite sure what I&amp;rsquo;m going to do with my mornings! Perhaps I&amp;rsquo;ll start blogging about some dialplan stuff, or coming up with some sort of project to build. We&amp;rsquo;ll see! Any suggestions about things to document on my blog are of course welcome.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t stop posting your comments and suggestions to the OFPS site though! (&lt;a href=&#34;http://ofps.oreilly.com&#34;&gt;http://ofps.oreilly.com&lt;/a&gt;) When the O&amp;rsquo;Reilly production team is done with the book in a few weeks, we&amp;rsquo;re going to have time to do additional modifications and editing, so your comments will get addressed then. It&amp;rsquo;s looking like the estimated shipping date of books for March is realistic at this point.&lt;/p&gt;

&lt;p&gt;Thanks for all the support the community has shown us this far. This is going to be by far the best book on Asterisk to date.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scheduling automated calls between two participants with res_calendar</title>
      <link>http://blog.leifmadsen.com/blog/2010/09/29/scheduling-automated-calls-between-two-participants-with-res_calendar/</link>
      <pubDate>Wed, 29 Sep 2010 14:25:50 +0000</pubDate>
      
      <guid>http://blog.leifmadsen.com/blog/2010/09/29/scheduling-automated-calls-between-two-participants-with-res_calendar/</guid>
      <description>&lt;p&gt;Here is a little dialplan snippet I wrote this morning for the next edition of the Asterisk book. While I&amp;rsquo;m not going to delve into all the aspects of setting up res_calendar like we do in the book, I thought for those of you who might already have this working might enjoy it.&lt;/p&gt;

&lt;p&gt;(The calendaring modules are available in Asterisk 1.8, which is currently in release candidate status. Check out &lt;a href=&#34;http://www.asterisk.org/downloads&#34;&gt;http://www.asterisk.org/downloads&lt;/a&gt; for the current version.)&lt;/p&gt;

&lt;p&gt;I started with this little bit of dialplan that gets triggered when a call is answered from the calendaring module:&lt;/p&gt;

&lt;p&gt;﻿﻿﻿&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[AutomatedMeetingSetup]
exten =&amp;gt; start,1,Verbose(2,Triggering meeting setup for two participants)
   same =&amp;gt; n,Set(DeviceToDial=${FILTER(0-9A-Za-z,${CALENDAR_EVENT(location)})})
   same =&amp;gt; n,Dial(SIP/${DeviceToDial},30)
   same =&amp;gt; n,Hangup()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The location field in my calendar event (which in this case is labeled as Destination in my Google Calendar) contains the string 0000FFFF0002 which is the device identifier in my example.&lt;/p&gt;

&lt;p&gt;Once you get that working, the cool magic happens below. In the following example, a call is placed from the calendaring module when a meeting needs to take place between two participants. The first part of the dialplan allows the first person called to accept or reject the meeting, and if accepted, to record a message for the other party. Once that recording is saved, the dialplan will go ahead and trigger a call to the other meeting participant.&lt;/p&gt;

&lt;p&gt;When that meeting participant answers the call, a Macro() is employed to allow them to listen to the recorded message left by the first party, (i.e. &amp;ldquo;Hey Jim, this is Leif. We have a meeting scheduled right now.&amp;rdquo;). That person is then presented the same option to accept or reject the call by pressing 1 or 2.&lt;/p&gt;

&lt;p&gt;Of course the dialplan could even by further expanded to play back messages when the calls were rejected, the option for the called party to leave a return message of why they are rejecting the call, and maybe even the ability to post-pone the call for a few minutes. All it takes is some clever dialplan!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[AutomatedMeetingSetup]
exten =&amp;gt; start,1,Verbose(2,Triggering meeting setup for two participants)
same =&amp;gt; n,Read(CheckMeetingAcceptance,to-confirm-wakeup&amp;amp;press-1&amp;amp;otherwise&amp;amp;press-2,,1)
same =&amp;gt; n,GotoIf($[&amp;quot;${CheckMeetingAcceptance}&amp;quot; != &amp;quot;1&amp;quot;]?hangup,1)

same =&amp;gt; n,Playback(silence/1&amp;amp;pls-rcrd-name-at-tone&amp;amp;and-prs-pound-whn-finished)
same =&amp;gt; n,Set(__RandomNumber=${RAND()})
same =&amp;gt; n,Record(/tmp/meeting-invite-${RandomNumber}.ulaw)

same =&amp;gt; n,Set(DeviceToDial=${FILTER(0-9A-Za-z,${CALENDAR_EVENT(location)})})
same =&amp;gt; n,Dial(SIP/${DeviceToDial},30,M(CheckConfirm))
same =&amp;gt; n,Hangup()

exten =&amp;gt; hangup,1,Verbose(2,Call was rejected)
same =&amp;gt; n,Playback(vm-goodbye)
same =&amp;gt; n,Hangup()

[macro-CheckConfirm]
exten =&amp;gt; s,1,Verbose(2,Allowing called party to accept or reject)
same =&amp;gt; n,Playback(/tmp/meeting-invite-${RandomNumber})
same =&amp;gt; n,Read(CheckMeetingAcceptance,to-confirm-wakeup&amp;amp;press-1&amp;amp;otherwise&amp;amp;press-2,,1)
same =&amp;gt; n,GotoIf($[&amp;quot;${CheckMeetingAcceptance}&amp;quot; != &amp;quot;1&amp;quot;]?hangup,1)

exten =&amp;gt; hangup,1,Verbose(2,Call was rejected by called party)
same =&amp;gt; n,Playback(vm-goodbye)
same =&amp;gt; n,Hangup()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Musings about ENUMplus and ISNs</title>
      <link>http://blog.leifmadsen.com/blog/2010/02/19/musings-about-enumplus-and-isns/</link>
      <pubDate>Fri, 19 Feb 2010 15:38:07 +0000</pubDate>
      
      <guid>http://blog.leifmadsen.com/blog/2010/02/19/musings-about-enumplus-and-isns/</guid>
      <description>

&lt;p&gt;Recently I&amp;rsquo;ve been playing around with a couple of technologies that I haven&amp;rsquo;t used in quite a while; ENUM and ISN. First, a little information on what these technologies are about.&lt;/p&gt;

&lt;h2 id=&#34;isns-and-itads:133b4c6dfdac6adcd5cf93b53302f8ac&#34;&gt;ISNs and ITADs&lt;/h2&gt;

&lt;p&gt;First, lets talk about ISN (ITAD Subscriber Number) and ITAD (Internet Telephony Administrative Domain). I think the &lt;a href=&#34;http://www.freenum.org&#34;&gt;http://www.freenum.org&lt;/a&gt; website does a good job of succinctly describing the problem attempting to be addressed:&lt;/p&gt;

&lt;p&gt;&amp;ldquo;The Freenum/ISN system is 12-digit-keypad (telephone handset) friendly method of providing mapping between users. While the eventual use of email-style URI pointers is the eventual goal for communications identifiers, it is still the case that the majority of the world&amp;rsquo;s telephony users are trapped using a 12-digit keypad for extended numeric entry, and it is for the purposes of these devices that the Freenum system and ISN dialing was designed as a &amp;ldquo;stopgap&amp;rdquo; which may last many years. Using ENUM-like methods and IETF standards but not using telephone numbers, the Freenum/ISN dialing system is designed to initially allow SIP-capable proxies and iPBX systems to connect to each other in a free, open, and protocol agnostic manner over the Internet. Initially focused on SIP voice communications, the platform is hoped to eventually extend to other communications methods as those protocols become more widespread.&amp;rdquo; &amp;ndash; freenum.org&lt;/p&gt;

&lt;p&gt;An ISN is a number that looks like:  100*460&lt;/p&gt;

&lt;p&gt;The ITAD part of that ISN is the number 460 where you can think of the 460 as the domain. If we used an email address (or SIP URI for that matter) as an example, we&amp;rsquo;d have something like leif@leifmadsen.com where leifmadsen.com would be the domain, and the number 460 would be the equivalent of that. The number 100 would be the unique identifier within that domain, which would represent &amp;lsquo;leif&amp;rsquo; prior to the email &amp;lsquo;at&amp;rsquo; symbol. And finally, you can think of the asterisk in the ISN as the &amp;lsquo;at&amp;rsquo; symbol (@) in the ISN. We could then read 100*460 as &amp;ldquo;extension 100 at ITAD 460&amp;rdquo;. And the 100*460 would then map to the SIP URI of sip:leif@leifmadsen.com (for example).&lt;/p&gt;

&lt;p&gt;This allows a stopgap measure of permitting traditional telephony devices to dial VoIP addresses from their keypad. Because of the nature of VoIP and how a simple URI can actually ring multiple devices, enter into a queue, or an auto-attendant, it doesn&amp;rsquo;t always make sense to utilize a telephone number to represent a SIP URI (see more information about this below in the ENUM section). Perhaps you are a small company with approximately 20 devices, but only 2-3 phone numbers. It doesn&amp;rsquo;t make sense to obtain multiple phone numbers for your company just as a method of dialing a SIP URI from a traditional keypad. In this way, you can assign numbers any which way it makes sense in your company with ISNs.&lt;/p&gt;

&lt;p&gt;The company with 20 extensions could then assign ISNs to each device such as:  201*460, 202*460 &amp;hellip; 220*460. The operator could be 0*460, and perhaps the auto-attendant could be 1*460. There are no set mechanisms or best practices (yet), but as time evolves, perhaps these will come to fruition.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not sure if ISNs will catch on with the general public, as historically things like ENUM and other services of this nature haven&amp;rsquo;t progressed as much as they likely should, but the idea is sound, and certainly makes more sense to me than having to remember several phone numbers for each extension or location.&lt;/p&gt;

&lt;p&gt;As this is simply an overview about ISNs, I&amp;rsquo;ll stop here. Future articles will delve into the configurations and testing for outbound and inbound calls with Asterisk, setting up DNS, etc. For now, see the &lt;a href=&#34;http://freenum.org&#34;&gt;http://freenum.org&lt;/a&gt; website for more information about configuring these aspects. Unfortunately the Asterisk information is out of date (in terms of utilizing the best features of the dialplan). I&amp;rsquo;d be happy to update the information if enough requests and interest is generated.&lt;/p&gt;

&lt;h2 id=&#34;enumplus:133b4c6dfdac6adcd5cf93b53302f8ac&#34;&gt;ENUMplus&lt;/h2&gt;

&lt;p&gt;ENUMplus (&lt;a href=&#34;http://www.enumplus.org&#34;&gt;http://www.enumplus.org&lt;/a&gt;) is a site which takes the information from several ENUM databases and allows you to perform a single lookup using cURL. Since there is a lot of technology going on in that sentence, lets step back and define each of these aspects.&lt;/p&gt;

&lt;p&gt;I think the wikipedia entry about ENUM does more justice about what it is than what I could do, so lets quote a resource :)&lt;/p&gt;

&lt;p&gt;&amp;ldquo;&lt;strong&gt;Telephone number mapping&lt;/strong&gt; is the process of unifying the &lt;a href=&#34;http://blog.leifmadsen.com/wiki/Telephone&#34;&gt;telephone&lt;/a&gt; number system of the &lt;a href=&#34;http://blog.leifmadsen.com/wiki/Public_switched_telephone_network&#34;&gt;public switched telephone network&lt;/a&gt; with the &lt;a href=&#34;http://blog.leifmadsen.com/wiki/Internet&#34;&gt;Internet&lt;/a&gt; addressing and identification &lt;a href=&#34;http://blog.leifmadsen.com/wiki/Name_space&#34;&gt;name spaces&lt;/a&gt;. Telephone numbers are systematically organized in the &lt;a href=&#34;http://blog.leifmadsen.com/wiki/E.164&#34;&gt;E.164&lt;/a&gt; standard, while the Internet uses the &lt;a href=&#34;http://blog.leifmadsen.com/wiki/Domain_Name_System&#34;&gt;Domain Name System&lt;/a&gt; for linking &lt;a href=&#34;http://blog.leifmadsen.com/wiki/Domain_name&#34;&gt;domain names&lt;/a&gt; to &lt;a href=&#34;http://blog.leifmadsen.com/wiki/IP_address&#34;&gt;IP addresses&lt;/a&gt; and other resource information. Telephone number mapping systems provide facilities to determine applicable Internet communications servers responsible for servicing a given telephone number by simple lookups in the Domain Name System.&lt;/p&gt;

&lt;p&gt;The most prominent facility for telephone number mapping is the E.164 NUmber Mapping (ENUM) standard. It uses special &lt;a href=&#34;http://blog.leifmadsen.com/wiki/DNS_record&#34;&gt;DNS record&lt;/a&gt; types to translate a telephone number into a &lt;a href=&#34;http://blog.leifmadsen.com/wiki/Uniform_Resource_Identifier&#34;&gt;Uniform Resource Identifier&lt;/a&gt; or IP address that can be used in Internet communications.&amp;rdquo; &amp;ndash; wikipedia entry at &lt;a href=&#34;http://en.wikipedia.org/wiki/Telephone_Number_Mapping&#34;&gt;http://en.wikipedia.org/wiki/Telephone_Number_Mapping&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And cURL is a technology that allows you place a request via a website, and have information returned. It is most typically used by programmers to get information from a website without having to parse through the entire site.&lt;/p&gt;

&lt;p&gt;So by marrying these two technologies, ENUM and cURL together, ENUMplus has created a one-stop-shop for performing ENUM lookups. By performing an ENUM lookup prior to placing a call from your Asterisk system, is that if a telephone number has been registered with one of the ENUM organizations and has a SIP URI to point to, then we can utilize that SIP URI instead of calling over the PSTN, which can save toll costs, and free up a circuit for other calls.&lt;/p&gt;

&lt;p&gt;I originally wrote a section of dialplan while testing out the service (which is very quick!) and added it to the ENUMplus wiki page for the configuration of Asterisk 1.6 systems. Originally I had this done as a separate path for dialing that would utilize a prefix of 7 prior to dialing out in order to do an ENUM lookup, and then you could dial without the prefix if you didn&amp;rsquo;t want the lookup (or if the lookup failed). I&amp;rsquo;ve since realized that this method is the wrong approach for obvious reasons (who wants to dial the number twice?), so I have since modified my dialplan to always utilize ENUM lookups prior to placing a call via the PSTN.&lt;/p&gt;

&lt;p&gt;I want to show you the following example from my dialplan, which I&amp;rsquo;ll eventually clean up and add to the ENUMplus wiki.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exten =&amp;gt; _+1NXXNXXXXXX,1,Set(X=${EXTEN:1})
exten =&amp;gt; _+1NXXNXXXXXX,n,Goto(setCID,1)
exten =&amp;gt; _+NXXNXXXXXX,1,Set(X=1${EXTEN:1})
exten =&amp;gt; _+NXXNXXXXXX,n,Goto(setCID,1)
exten =&amp;gt; _1NXXNXXXXXX,1,Set(X=${EXTEN})
exten =&amp;gt; _1NXXNXXXXXX,n,Goto(setCID,1)
exten =&amp;gt; _NXXNXXXXXX,1,Goto(1${EXTEN},1)

exten =&amp;gt; setCID,1,NoOp()
exten =&amp;gt; setCID,n,Set(CALLERID(name)=LM Enterprises)
exten =&amp;gt; setCID,n,Set(CALLERID(num)=4164790259)
exten =&amp;gt; setCID,n,Goto(lookup,1)

exten =&amp;gt; lookup,1,Verbose(2,Looking up direct dial via ENUM from ENUMPlus: ${X:1})
exten =&amp;gt; lookup,n,Playback(silence/1&amp;amp;doing-enum-lookup)
exten =&amp;gt; lookup,n,Set(CURL_RESULT=${CURL(${GLOBAL(G_ENUMPLUS_API)}/${X:1},key=${GLOBAL(G_ENUMPLUS_KEY)})})
exten =&amp;gt; lookup,n,GotoIf($[${ISNULL(${CURL_RESULT})}]?no_result,1)
exten =&amp;gt; lookup,n,Goto(dial,1)

exten =&amp;gt; dial,1,Verbose(2,Lookup returned:  ${CURL_RESULT})
exten =&amp;gt; dial,n,Playback(enum-lookup-successful)
exten =&amp;gt; dial,n,Dial(${CUT(CURL_RESULT,|,1)},30)
exten =&amp;gt; dial,n,Hangup()

exten =&amp;gt; no_result,1,Verbose(2,ENUMPlus returned no data.)
exten =&amp;gt; no_result,n,Playback(silence/1&amp;amp;enum-lookup-failed)
exten =&amp;gt; no_result,n,Set(OUTBOUND_ROUTE=SIP/${DEFAULT_ITSP_ROUTE})
exten =&amp;gt; no_result,n,Dial(${OUTBOUND_ROUTE}/${X})
exten =&amp;gt; no_result,n,Hangup()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Ask the Expert!</title>
      <link>http://blog.leifmadsen.com/blog/2009/09/08/ask-the-expert/</link>
      <pubDate>Tue, 08 Sep 2009 13:12:20 +0000</pubDate>
      
      <guid>http://blog.leifmadsen.com/blog/2009/09/08/ask-the-expert/</guid>
      <description>&lt;p&gt;_UPDATE (October 7, 2009):&lt;/p&gt;

&lt;p&gt;This post didn&amp;rsquo;t quite generate the type of questions I was hoping for, and because of that I&amp;rsquo;m not able to generate a knowledgeable and informed response that would be overtly useful. However, I will leave this topic open for the next little while in the hopes some more questions can be generated. It is entirely possible I haven&amp;rsquo;t been specific enough in my request for the type of questions I&amp;rsquo;d like to answer, so here goes.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m looking for questions related to Asterisk implementation issues, specifically related to problems in the dialplan or /etc/asterisk configuration. For example, a good question might be proposed as;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;I have a call center solution I&amp;rsquo;m building, and I&amp;rsquo;ve been unable to get the member status to be consistently accurate. Here are the relevant parts of my configuration currently, and the console output of my mostly correct but inaccurate status. Thanks!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Hopefully this helps to clear up any confusion I may have generated by the generally asked topic of Ask the Expert, and will lead to better questions and a fruitful article in the future. Thanks!
_&lt;/p&gt;

&lt;p&gt;I figured that due to my limited time to write blog posts, and my intent to try and write at least one blog post a week, I&amp;rsquo;d do a simple &amp;ldquo;Ask the Expert&amp;rdquo; type of article. I&amp;rsquo;ll take 5 of your questions and answer them in a blog post later this week (hopefully on Thursday). So if you have some particular problem you&amp;rsquo;re trying to get solved, or have a question about implementation, now would be a a great time to get the answer you&amp;rsquo;re looking for.&lt;/p&gt;

&lt;p&gt;Ideally you&amp;rsquo;ll ask questions related to Asterisk :)  I tend to specialize in queues and database integration, so those are the realms you&amp;rsquo;ll probably get the most indepth answer. Or if you just have a problem you&amp;rsquo;re trying to solve in dialplan that you can&amp;rsquo;t quite get to work, let me know, as I love creating clever dialplans.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New articles coming soon!</title>
      <link>http://blog.leifmadsen.com/blog/2009/06/17/new-articles-coming-soon/</link>
      <pubDate>Wed, 17 Jun 2009 01:24:07 +0000</pubDate>
      
      <guid>http://blog.leifmadsen.com/blog/2009/06/17/new-articles-coming-soon/</guid>
      <description>&lt;p&gt;I have vowed to try and write at least ONE article per week on my blog, even if it is quite short. I&amp;rsquo;m not sure I will be able to get to write an article this week due to some pressing consulting issues, but I&amp;rsquo;m still gonna try. If anything, I&amp;rsquo;m going to cheat and say this is my post for &lt;em&gt;this&lt;/em&gt; week. How about I make a rule that says I can only cheat once per month? :)&lt;/p&gt;

&lt;p&gt;I wanted to let you know I have a couple of articles lined up for later this week and next week. They will deal with Asterisk Queue()&amp;rsquo;s as that is the area I have been spending the most time lately. They include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Moving from the deprecated AgentCallbackLogin() application to a dialplan based solution&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A series of articles (4-5 articles) on building a single system, hot-desking Agent queue system&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The first draft of a complete re-write of chapter 3 of Asterisk: The Future of Telephony&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first bullet point is an issue I have been seeing on IRC and other forums for about 2 years, and which I want to solve by providing the necessary documentation on how to move from using AgentCallbackLogin() to a dialplan based solution as is the preferred method. I will create a dialplan subroutine which will hopefully make it easy to replace the calls to AgentCallbackLogin() with a GoSub().&lt;/p&gt;

&lt;p&gt;The second bullet point is something I&amp;rsquo;m very excited about. I recently build a hot-desking solution for a client, and while building it was able to keep it quite general and didn&amp;rsquo;t need to add anything that wouldn&amp;rsquo;t be useful for the general population. I have received permission from the client (who will remain nameless for now) to utilize the configuration files I built for them in a series of articles detailing how to build the system from scratch. It is a win-win situation because you get to learn how I built the system, and they get some additional documentation on how the system works, and why things were built the way they were.&lt;/p&gt;

&lt;p&gt;The third bullet point is a good deal amount of work, which is really just the start of a greater amount of work; the updating of Asterisk: The Future of Telephony, 2nd Edition, to a 3rd edition that covers the 1.6 series of Asterisk. I have recently gotten enough exposure to working with Asterisk 1.6 releases that I&amp;rsquo;m confident in being able to start on this grandiose project. I plan on using this blog as a test bed for some draft work.&lt;/p&gt;

&lt;p&gt;So stay tuned for some exciting articles over the coming 2-3 weeks!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>