<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Howto on Asterisk, and other worldly endeavours</title>
    <link>http://leifmadsen.github.io/hugo_gh_blog/tags/howto/</link>
    <description>Recent content in Howto on Asterisk, and other worldly endeavours</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 09 Sep 2011 13:28:47 +0000</lastBuildDate>
    <atom:link href="http://leifmadsen.github.io/hugo_gh_blog/tags/howto/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using Dialplan Functions: AES_DECRYPT() and AES_ENCRYPT()</title>
      <link>http://leifmadsen.github.io/hugo_gh_blog/blog/2011/09/09/using-dialplan-functions-aes_decrypt-and-aes_encrypt/</link>
      <pubDate>Fri, 09 Sep 2011 13:28:47 +0000</pubDate>
      
      <guid>http://leifmadsen.github.io/hugo_gh_blog/blog/2011/09/09/using-dialplan-functions-aes_decrypt-and-aes_encrypt/</guid>
      <description>&lt;p&gt;I  recently asked on twitter how many people would be interested in a set of blog posts that focused on how to use the various dialplan functions in Asterisk, and I got quite a positive response. I posted that shortly before getting married, and now that I&amp;rsquo;m back into the groove of things, I&amp;rsquo;m going to take a shot at posting a bunch of content focused around Asterisk dialplan functions. If you don&amp;rsquo;t know what Asterisk dialplan functions are, head on over to the online version of &lt;a href=&#34;http://ofps.oreilly.com/titles/9780596517342/index.html&#34;&gt;Asterisk: The Definitive Guide (3rd edition)&lt;/a&gt; (or &lt;a href=&#34;http://www.amazon.com/Asterisk-Definitive-Guide-Guides/dp/0596517343/ref=sr_1_1?ie=UTF8&amp;amp;qid=1315572209&amp;amp;sr=8-1&#34;&gt;buy&lt;/a&gt; it) and read the section on &lt;a href=&#34;http://ofps.oreilly.com/titles/9780596517342/asterisk-DP-Deeper.html#asterisk-CHP-6-SECT-2&#34;&gt;dialplan functions&lt;/a&gt;. If you&amp;rsquo;re still starting out with Asterisk, I highly suggest you start with the &lt;a href=&#34;http://ofps.oreilly.com/titles/9780596517342/asterisk-DP-Basics.html&#34;&gt;dialplan basics&lt;/a&gt; chapter.&lt;/p&gt;

&lt;p&gt;Today we&amp;rsquo;ll look at the first 2 dialplan functions in my list: &lt;code&gt;AES_DECRYPT()&lt;/code&gt; and &lt;code&gt;AES_ENCRYPT()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The AES_DECRYPT() and AES_ENCRYPT() functions work by passing strings to the functions, and they return a result. If you pass an unencrypted string to the AES_ENCRYPT() function it will return an encrypted string; vice-versa for the AES_DECRYPT() function. The two functions operate by passing a string and a key where the result is encoded  in base64.&lt;/p&gt;

&lt;p&gt;Use case for these functions probably makes the most sense when you need to store data outside of the dialplan, perhaps passwords, pins, or other data passed in by the caller, but which you want to secure when you go to store it. Let&amp;rsquo;s take an example where we create some dialplan that allows a caller to set their pin and store it in the database. For the sake of simplicity I&amp;rsquo;m not going to add any error checking (like to verify we really have data to work with, allow the caller to verify their extension, etc.):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exten =&amp;gt; *88,1,NoOp()
 same =&amp;gt; n,Playback(silence/1)
 same =&amp;gt; n,Read(UserExtension,extension,3)                  ; read persons 3 digit extension unmber
 same =&amp;gt; n,Verbose(2,Extension number: ${UserExtension})
 same =&amp;gt; n,Read(PinEntry,agent-pass)                        ; ask for a pin number
 same =&amp;gt; n,Verbose(2,Pin number: ${PinEntry})
 same =&amp;gt; n,SayDigits(${PinEntry})                           ; say pin back to caller
 same =&amp;gt; n,Set(DB(pin/${UserExtension})=${PinEntry})        ; store pin in the AstDB
 same =&amp;gt; n,Playback(vm-goodbye)
 same =&amp;gt; n,Hangup()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the user enters their extension and pin, we store it in the AstDB. We can verify it was stored correctly by checking from the Asterisk CLI:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scrappy*CLI&amp;gt; database show pin
/pin/100 : 1234
1 results found.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s modify our dialplan to store the pin in the database using a value returned from &lt;code&gt;AES_ENCRYPT()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exten =&amp;gt; *88,1,NoOp()
 same =&amp;gt; n,Playback(silence/1)
 same =&amp;gt; n,Read(UserExtension,extension,3)
 same =&amp;gt; n,Verbose(2,Extension number: ${UserExtension})
 same =&amp;gt; n,Read(PinEntry,agent-pass)
 same =&amp;gt; n,Verbose(2,Pin number: ${PinEntry})
 same =&amp;gt; n,SayDigits(${PinEntry})
 same =&amp;gt; n,Set(SpecialKey=1234qwerasdfzxcv)
 same =&amp;gt; n,Set(EncryptedPin=${AES_ENCRYPT(${SpecialKey},${PinEntry})})
 same =&amp;gt; n,Set(DB(pin/${UserExtension})=${EncryptedPin})
 same =&amp;gt; n,Playback(vm-goodbye)
 same =&amp;gt; n,Hangup()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we can see the encoded string stored in the database:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scrappy*CLI&amp;gt; database show pin
/pin/100 : Je2G/qyHuGVKgvvXDwXjHA==
1 results found.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course anyone who has access to the AstDB from the Asterisk CLI is also going to have access to the Asterisk dialplan, so you&amp;rsquo;ll have to do a better job than I have here of hiding the secret key being used for encrypting the data. Really all we&amp;rsquo;re trying to do here is not make the list of pins and data in our AstDB quite so obvious. We could of course not use AstDB at all, and store the data remotely where we know people will have access to the data, but not access to the secret key on our Asterisk server.&lt;/p&gt;

&lt;p&gt;Now lets look at the inverse by decoding the pin to authenticate someone.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exten =&amp;gt; *77,1,NoOp()
 same =&amp;gt; n,Playback(silence/1)
 same =&amp;gt; n,Read(UserExtension,extension,3)                     ; get users extension
 same =&amp;gt; n,Set(EncryptedPin=${DB(pin/${UserExtension})})       ; get encrypted pin from AstDB
 same =&amp;gt; n,Read(PinEntry,agent-pass)                           ; get pin from user
 same =&amp;gt; n,Set(SpecialKey=1234qwerasdfzxcv)
 same =&amp;gt; n,Set(DecryptedPin=${AES_DECRYPT(${SpecialKey},${EncryptedPin})})                          ; decrypt the pin
 same =&amp;gt; n,Playback(${IF($[&amp;quot;${PinEntry}&amp;quot; = &amp;quot;${DecryptedPin}&amp;quot;]?pin-number-accepted:pin-invalid)})    ; if pin is correct, play number accepted, else, pin invalid
 same =&amp;gt; n,Playback(vm-goodbye)
 same =&amp;gt; n,Hangup()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it for now. Leave a comment if you like this format, and if you found this article useful. Thanks!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scheduling automated calls between two participants with res_calendar</title>
      <link>http://leifmadsen.github.io/hugo_gh_blog/blog/2010/09/29/scheduling-automated-calls-between-two-participants-with-res_calendar/</link>
      <pubDate>Wed, 29 Sep 2010 14:25:50 +0000</pubDate>
      
      <guid>http://leifmadsen.github.io/hugo_gh_blog/blog/2010/09/29/scheduling-automated-calls-between-two-participants-with-res_calendar/</guid>
      <description>&lt;p&gt;Here is a little dialplan snippet I wrote this morning for the next edition of the Asterisk book. While I&amp;rsquo;m not going to delve into all the aspects of setting up res_calendar like we do in the book, I thought for those of you who might already have this working might enjoy it.&lt;/p&gt;

&lt;p&gt;(The calendaring modules are available in Asterisk 1.8, which is currently in release candidate status. Check out &lt;a href=&#34;http://www.asterisk.org/downloads&#34;&gt;http://www.asterisk.org/downloads&lt;/a&gt; for the current version.)&lt;/p&gt;

&lt;p&gt;I started with this little bit of dialplan that gets triggered when a call is answered from the calendaring module:&lt;/p&gt;

&lt;p&gt;﻿﻿﻿&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[AutomatedMeetingSetup]
exten =&amp;gt; start,1,Verbose(2,Triggering meeting setup for two participants)
   same =&amp;gt; n,Set(DeviceToDial=${FILTER(0-9A-Za-z,${CALENDAR_EVENT(location)})})
   same =&amp;gt; n,Dial(SIP/${DeviceToDial},30)
   same =&amp;gt; n,Hangup()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The location field in my calendar event (which in this case is labeled as Destination in my Google Calendar) contains the string 0000FFFF0002 which is the device identifier in my example.&lt;/p&gt;

&lt;p&gt;Once you get that working, the cool magic happens below. In the following example, a call is placed from the calendaring module when a meeting needs to take place between two participants. The first part of the dialplan allows the first person called to accept or reject the meeting, and if accepted, to record a message for the other party. Once that recording is saved, the dialplan will go ahead and trigger a call to the other meeting participant.&lt;/p&gt;

&lt;p&gt;When that meeting participant answers the call, a Macro() is employed to allow them to listen to the recorded message left by the first party, (i.e. &amp;ldquo;Hey Jim, this is Leif. We have a meeting scheduled right now.&amp;rdquo;). That person is then presented the same option to accept or reject the call by pressing 1 or 2.&lt;/p&gt;

&lt;p&gt;Of course the dialplan could even by further expanded to play back messages when the calls were rejected, the option for the called party to leave a return message of why they are rejecting the call, and maybe even the ability to post-pone the call for a few minutes. All it takes is some clever dialplan!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[AutomatedMeetingSetup]
exten =&amp;gt; start,1,Verbose(2,Triggering meeting setup for two participants)
same =&amp;gt; n,Read(CheckMeetingAcceptance,to-confirm-wakeup&amp;amp;press-1&amp;amp;otherwise&amp;amp;press-2,,1)
same =&amp;gt; n,GotoIf($[&amp;quot;${CheckMeetingAcceptance}&amp;quot; != &amp;quot;1&amp;quot;]?hangup,1)

same =&amp;gt; n,Playback(silence/1&amp;amp;pls-rcrd-name-at-tone&amp;amp;and-prs-pound-whn-finished)
same =&amp;gt; n,Set(__RandomNumber=${RAND()})
same =&amp;gt; n,Record(/tmp/meeting-invite-${RandomNumber}.ulaw)

same =&amp;gt; n,Set(DeviceToDial=${FILTER(0-9A-Za-z,${CALENDAR_EVENT(location)})})
same =&amp;gt; n,Dial(SIP/${DeviceToDial},30,M(CheckConfirm))
same =&amp;gt; n,Hangup()

exten =&amp;gt; hangup,1,Verbose(2,Call was rejected)
same =&amp;gt; n,Playback(vm-goodbye)
same =&amp;gt; n,Hangup()

[macro-CheckConfirm]
exten =&amp;gt; s,1,Verbose(2,Allowing called party to accept or reject)
same =&amp;gt; n,Playback(/tmp/meeting-invite-${RandomNumber})
same =&amp;gt; n,Read(CheckMeetingAcceptance,to-confirm-wakeup&amp;amp;press-1&amp;amp;otherwise&amp;amp;press-2,,1)
same =&amp;gt; n,GotoIf($[&amp;quot;${CheckMeetingAcceptance}&amp;quot; != &amp;quot;1&amp;quot;]?hangup,1)

exten =&amp;gt; hangup,1,Verbose(2,Call was rejected by called party)
same =&amp;gt; n,Playback(vm-goodbye)
same =&amp;gt; n,Hangup()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Asterisk IMAP and Gmail</title>
      <link>http://leifmadsen.github.io/hugo_gh_blog/blog/2010/09/20/asterisk-imap-and-gmail/</link>
      <pubDate>Mon, 20 Sep 2010 15:37:44 +0000</pubDate>
      
      <guid>http://leifmadsen.github.io/hugo_gh_blog/blog/2010/09/20/asterisk-imap-and-gmail/</guid>
      <description>&lt;p&gt;Today I was working on the next edition of the Asterisk book and wanted to see if I could get Asterisk IMAP voicemail support to work with Gmail. I had tried doing this a few times in the past without success, but since I had spent some time documenting and testing against Dovecot last week for another client and gotten everything working, I figured I had a good base to start trying to connect to the Gmail IMAP servers.&lt;/p&gt;

&lt;p&gt;At first I was having problems with getting Asterisk to connect to the server as it would keep timing out when trying to connect to the Gmail IMAP servers on port 993. I looked at the instructions for connecting and double checked, and I thought I had everything right. I also made sure my IMAP library was compiled with OpenSSL support since Gmail requires you to connect via SSL.&lt;/p&gt;

&lt;p&gt;After reading a few emails and doing more testing, I finally stumbled upon the missing link! Find below the snippet of voicemail.conf configuration that finally allowed me to connect to the Gmail IMAP system with Asterisk IMAP voicemail support.&lt;/p&gt;

&lt;p&gt;Note: Be aware that there is a mixture of commas and pipes in the line where we&amp;rsquo;ve setup mailbox 100. This is not a typo!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;; voicemail.conf
imapserver=imap.gmail.com
imapport=993
imapflags=ssl

pollmailboxes=yes
pollfreq=30

[default]
100 =&amp;gt; 100,Leif Madsen,,,attach=no|imapuser=leif.madsen@MYDOMAIN_GOOGLE_APPS.com|imappassword=my_secret_password
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I was using this with Google Apps for one of the domains we bought for working on the book, so the login is the full email address. The password is what you use for logging into the Gmail interface. Also, you need to make sure you&amp;rsquo;ve enabled IMAP support in the web interface before trying this or else your connection won&amp;rsquo;t work.&lt;/p&gt;

&lt;p&gt;More information including step-by-step instructions on compiling IMAP support into Asterisk and configuration examples for Dovecot and Gmail will be in the upcoming book, but I was so excited to get this working today that I thought I&amp;rsquo;d share the secret sauce at least so you don&amp;rsquo;t have to wait for the whole recipe.&lt;/p&gt;

&lt;p&gt;Connecting to Gmail was not as quick as connecting to Dovecot on a remote server I was working with. I imagine this is due to the high load Google has to deal with, so while it works, there may be some minor delays when retrieving and leaving voice messages, but nothing that caused it to be unusable.&lt;/p&gt;

&lt;p&gt;Note: The KEY to making it work was the &lt;code&gt;imapflags=ssl&lt;/code&gt; part. Without that you won&amp;rsquo;t get connected and will have problems with timeouts and such going on with Asterisk. Once I enabled the &lt;code&gt;ssl&lt;/code&gt; flag I was golden.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installing the Asterisk Test Suite</title>
      <link>http://leifmadsen.github.io/hugo_gh_blog/blog/2010/05/03/installing-the-asterisk-test-suite/</link>
      <pubDate>Mon, 03 May 2010 15:17:57 +0000</pubDate>
      
      <guid>http://leifmadsen.github.io/hugo_gh_blog/blog/2010/05/03/installing-the-asterisk-test-suite/</guid>
      <description>&lt;p&gt;In case you missed it, I wrote an introductory &lt;a href=&#34;http://blogs.asterisk.org/2010/04/29/installing-the-asterisk-test-suite/&#34;&gt;article&lt;/a&gt; about the Asterisk Test Suite on the &lt;a href=&#34;http://blogs.asterisk.org&#34;&gt;Asterisk blog&lt;/a&gt;. The post takes you from a minimally installed Ubuntu 9.10 up to the point that you can run the tests in the test suite by going through all the possible errors you might encounter getting it loaded, and how to resolve those errors (most of them being missing dependencies).&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blogs.asterisk.org/2010/04/29/installing-the-asterisk-test-suite/&#34;&gt;http://blogs.asterisk.org/2010/04/29/installing-the-asterisk-test-suite/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using a Nokia E71 with Asterisk (3G or WiFi)</title>
      <link>http://leifmadsen.github.io/hugo_gh_blog/blog/2010/03/19/using-a-nokia-e71-with-asterisk-3g-or-wifi/</link>
      <pubDate>Fri, 19 Mar 2010 16:28:28 +0000</pubDate>
      
      <guid>http://leifmadsen.github.io/hugo_gh_blog/blog/2010/03/19/using-a-nokia-e71-with-asterisk-3g-or-wifi/</guid>
      <description>&lt;p&gt;There was some talk in one of the IRC chat rooms today about someone trying to get their E61i working with Asterisk. I haven&amp;rsquo;t had an issue getting that phone or my E71 phone working, but regardless he was having issues. I figured I might as well spend a little bit of time today going through my configuration, both for my own reference, and so that other people can get their Nokia&amp;rsquo;s setup with Asterisk as well.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll be using the native SIP client, although I&amp;rsquo;ve had just as good of luck using the Fring application. The advantage to the Fring application is that you can use it with Skype, along with multiple IM clients, and also video! I especially like that the application makes use of the video camera on the front of the phone so that you can use it as a videophone. Using the video on a phone like the iPhone or Nexus One seems useless to me (but I digress!).&lt;/p&gt;

&lt;p&gt;First, lets get our Asterisk configuration setup in &lt;em&gt;sip.conf&lt;/em&gt;. We&amp;rsquo;ll need to make sure we&amp;rsquo;ve setup a &lt;strong&gt;realm&lt;/strong&gt; in &lt;em&gt;sip.conf&lt;/em&gt; as our phone will require it. If you don&amp;rsquo;t, then the default realm is &amp;lsquo;&lt;strong&gt;asterisk&lt;/strong&gt;&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;sip.conf&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[general]
realm=pbx.my_asterisk_box.com
disallow=all
allow=ulaw
allow=alaw
srvlookup=yes
pedantic=yes
maxexpiry=360
minexpiry=120
defaultexpirey=120
videosupport=yes

[leifmadsen_cell]
type=friend
secret=super_secret_password
context=devices
nat=yes
canreinvite=no
qualify=no
mailbox=100@default
callerid=Leif Madsen &amp;lt;571&amp;gt;
insecure=invite,port
subscribecontext=subscriptions
disallow=all
allow=g729
allow=ulaw
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Feel free to change or add whatever options you need for your &lt;em&gt;sip.conf&lt;/em&gt;. This is generally what I have working right now. I&amp;rsquo;ve left out all my domain handling and SIP URI stuff this time around. Maybe I&amp;rsquo;ll talk about it in another blog post in the future.&lt;/p&gt;

&lt;p&gt;OK, back to the task at hand. Now that we have our sip.conf file configured, just run &amp;lsquo;sip reload&amp;rsquo; from the Asterisk console, and your settings should be available. You can check to make sure your peer loads up with &amp;lsquo;&lt;strong&gt;sip show peers&lt;/strong&gt;&amp;rsquo; or &amp;lsquo;&lt;strong&gt;sip show peer leifmadsen_cell&lt;/strong&gt;&amp;rsquo; (or whatever you called your configuration.&lt;/p&gt;

&lt;p&gt;The next step up is to configure our Nokia device. These settings should likely be the same on both the E61i and the E71, but I&amp;rsquo;m working from a 400 series firmware on the E71, so your mileage may vary.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Menu &amp;gt; Tools &amp;gt; Settings &amp;gt; Connection &amp;gt; SIP Settings &amp;gt; Options &amp;gt; New SIP Profile &amp;gt; Use default profile&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;**
**&lt;/p&gt;

&lt;p&gt;With the new profile created, we need to modify it for connection to our Asterisk system. Starting at the top we have the following fields: Profile name, Service profile, Default access point, Public user name, Use compression, Registration, Use security, Proxy Server, and Registrar Server. We&amp;rsquo;ll going through each of these and configure the two submenus: Proxy Server and Registrar Server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Profile name:&lt;/strong&gt; Anything you want. I called mine &amp;ldquo;Business Line&amp;rdquo;
&lt;strong&gt;Service profile:&lt;/strong&gt; _IETF
&lt;strong&gt;Default access point:&lt;/strong&gt; Select either a wifi connection or 3G connection. In my case I&amp;rsquo;m selecting &amp;ldquo;Rogers Internet&amp;rdquo;
&lt;strong&gt;Public user name:&lt;/strong&gt; _sip:leifmadsen_cell@pbx.my_asterisk&lt;em&gt;box.com&lt;/em&gt; (notice how leifmadsen_cell is the same as what we configured in sip.conf)
&lt;strong&gt;Use compression:&lt;/strong&gt; _No
&lt;strong&gt;Registration:&lt;/strong&gt; &lt;em&gt;Always on&lt;/em&gt; (you can set this to &amp;lsquo;When needed&amp;rsquo; if you only want to place outbound calls via VoIP sometimes)
&lt;strong&gt;Use security:&lt;/strong&gt; _No___&lt;/p&gt;

&lt;p&gt;**Proxy Server &amp;gt;
&lt;strong&gt;Proxy server address:&lt;/strong&gt; _pbx.my_asterisk_box.com
&lt;strong&gt;Realm:&lt;/strong&gt; _pbx.my_asterisk_box.com
&lt;strong&gt;Username:&lt;/strong&gt; _leifmadsen_cell
&lt;strong&gt;Password:&lt;/strong&gt; _super_secret_password
&lt;strong&gt;Allow loose routing:&lt;/strong&gt; _Yes
&lt;strong&gt;Transport type:&lt;/strong&gt; _UDP
&lt;strong&gt;Port:&lt;/strong&gt; &lt;em&gt;5060&lt;/em&gt; (unless you&amp;rsquo;ve changed this yourself on your Asterisk box)______**&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Back &amp;gt; Registrar server &amp;gt;
(fill this information out exactly like the Proxy server section)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At this point, hit the &lt;strong&gt;Back&lt;/strong&gt; button a couple of times to make sure you phone will register. If you&amp;rsquo;re still having issues, double check all your configuration options, and potentially restart the phone. With older firmware versions I&amp;rsquo;ve had issues where if I don&amp;rsquo;t get it perfect the first time and make a change, I have to restart the phone.&lt;/p&gt;

&lt;p&gt;Once we see that we&amp;rsquo;ve registered the device, we need to enable it from another screen so that we can place and receive calls from Asterisk.&lt;/p&gt;

&lt;p&gt;Go back out of the SIP Settings screen to your Connection screen in the Tools menu, then select Internet tel.&lt;/p&gt;

&lt;p&gt;By default you will see a screen that says (no Internet telephone settings).&lt;/p&gt;

&lt;p&gt;Select the Options button and create a new profile. There will be two fields: Name and SIP profiles. By default the SIP profile field should be selected with Business Line (or whatever you called your SIP connection) automatically. The Name field is currently set to Default, but I just renamed it to VoIP. Feel free to name it anything you want.&lt;/p&gt;

&lt;p&gt;Back out of all your menus until you get back to the main screen. You should see an icon in the upper-right hand corner that looks like a telephone hand set on top of a globe. At this point, try dialing one of the extensions on your Asterisk server to see if things are working! I like to try calling my voicemail as it lets me test DTMF as well.&lt;/p&gt;

&lt;p&gt;Below is a (modified) INVITE from the E71 showing what you&amp;rsquo;ll see when the request comes from the phone. The most interesting part is the SDP portion which shows us which codecs the device supports and offers. In the case of the phone and firmware combination I&amp;rsquo;m using, I can use G.711 ulaw and alaw, G729, and iLBC.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INVITE sip:8500@pbx.my_asterisk_server.com;user=phone SIP/2.0
Route:
Via: SIP/2.0/UDP 10.10.10.84:5060;branch=z9hG4bKlq60dckmalhc6vap06nosen;rport
From: ;tag=mh5gdciapphc6m6506no
To:
Contact:
Supported: 100rel,sec-agree
CSeq: 1252 INVITE
Call-ID: rdw6Iy8zoIfKxg6LzJ7FSPdgBvIb8y
Allow: INVITE,ACK,BYE,CANCEL,REFER,NOTIFY,OPTIONS,PRACK
Expires: 120
Privacy: none
User-Agent: E71-2 RM-346 400.21.013
P-Preferred-Identity: sip:leifmadsen_cell@pbx.my_asterisk_server.com
Max-Forwards: 70
Content-Type: application/sdp
Accept: application/sdp
Content-Length: 447

v=0
o=Nokia-SIPUA 63437257072703500 63437257072703500 IN IP4 10.10.10.84
s=-
c=IN IP4 10.10.10.84
t=0 0
m=audio 49152 RTP/AVP 96 0 8 97 18 98 13
a=sendrecv
a=ptime:20
a=maxptime:200
a=fmtp:96 mode-change-neighbor=1
a=fmtp:18 annexb=no
a=fmtp:98 0-15
a=rtpmap:96 AMR/8000/1
a=rtpmap:0 PCMU/8000/1
a=rtpmap:8 PCMA/8000/1
a=rtpmap:97 iLBC/8000/1
a=rtpmap:18 G729/8000/1
a=rtpmap:98 telephone-event/8000/1
a=rtpmap:13 CN/8000/1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So beyond that, there shouldn&amp;rsquo;t be anything else you need to do. Using the same configuration in sip.conf for Asterisk should also work with Fring. Perhaps I&amp;rsquo;ll create another blog post in the future about using Fring with E71 if there is interest in that. Anyone who wants to try testing out some video calls through my Asterisk box using their Fring video enabled phone, just let me know offline and we&amp;rsquo;ll set something up!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building Queues with Asterisk</title>
      <link>http://leifmadsen.github.io/hugo_gh_blog/blog/2009/11/14/building-queues-with-asterisk/</link>
      <pubDate>Sat, 14 Nov 2009 15:07:19 +0000</pubDate>
      
      <guid>http://leifmadsen.github.io/hugo_gh_blog/blog/2009/11/14/building-queues-with-asterisk/</guid>
      <description>&lt;p&gt;Wow it&amp;rsquo;s been a long time since I&amp;rsquo;ve update my blog. Well, lets do that! :)&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve just posted some documentation to the Asterisk issue tracker for review. It&amp;rsquo;s about building queues with Asterisk. It is the start of probably 2 or 3 sets of documentation on building queues with Asterisk that I&amp;rsquo;ll be submitting. You can find the documentation here for now:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://issues.asterisk.org/view.php?id=16237&#34;&gt;https://issues.asterisk.org/view.php?id=16237&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This documentation will likely be merged into core Asterisk at some point in the near future (doc/ subdirectory of your Asterisk source) and likely posted on &lt;a href=&#34;http://blogs.asterisk.org&#34;&gt;http://blogs.asterisk.org&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;Check it out, and let me know if you find any spelling errors, documentation errors, anything that isn&amp;rsquo;t clear, or errors in the examples. Of course suggestions for future documentation to be written would also be welcomed.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HowTo: Getting Jabber/XMPP notifications from your PBX</title>
      <link>http://leifmadsen.github.io/hugo_gh_blog/blog/2009/07/18/howto-getting-jabber/xmpp-notifications-from-your-pbx/</link>
      <pubDate>Sat, 18 Jul 2009 03:47:57 +0000</pubDate>
      
      <guid>http://leifmadsen.github.io/hugo_gh_blog/blog/2009/07/18/howto-getting-jabber/xmpp-notifications-from-your-pbx/</guid>
      <description>

&lt;p&gt;I just have to write up a quick post to show you JUST HOW SIMPLE it is to get interesting events from your PBX via Jabber. Right now I&amp;rsquo;m using it to notify me of anyone trying out my test ISN number, or whenever they join my conference bridge (good reminder if I lose track of time and forget that I scheduled some people to join my conference room).&lt;/p&gt;

&lt;p&gt;This is based on Asterisk 1.4, although the same configuration should work on 1.6, but I like to try and give 1.4 examples where I can for those of you still running 1.4.&lt;/p&gt;

&lt;p&gt;So the first thing you need to do is configure Asterisk to connect to a Jabber server. I like to use the Google Jabber servers since it saves me from setting one up :) I have setup Google Apps as well so that I can use my own domain, but using a Gmail address should work just as well.&lt;/p&gt;

&lt;p&gt;Configuring res_jabber (the Jabber module in Asterisk) is nice and easy. The main thing to notice is that I uncommented the &amp;lsquo;debug&amp;rsquo; option as the default is to have a bunch of debugging on the console. Find below the entire jabber.conf file from &lt;em&gt;/etc/asterisk&lt;/em&gt; based on the sample file, but with the required options uncommented for connecting to talk.google.com. Note that I&amp;rsquo;ve created a Jabber account specifically for my Asterisk box, although I&amp;rsquo;m sure you could use an existing account if you wanted.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;[general]
debug=no                                   ;;Turn on debugging by default.
;autoprune=yes                           ;;Auto remove users from buddy list.
;autoregister=yes                        ;;Auto register users from buddy list.

[asterisk]                                   ;;label
type=client                                 ;;Client or Component connection
serverhost=talk.google.com          ;;Route to server for example,
                                                ;;	talk.google.com
username=asterisk@leifmadsen.com        ;;Username with optional roster.
secret=welcome                                    ;;Password
port=5222                                            ;;Port to use defaults to 5222
usetls=yes                                           ;;Use tls or not
usesasl=yes                                         ;;Use sasl or not
buddy=leif@leifmadsen.com                    ;;Manual addition of buddy to list.
statusmessage=&amp;quot;I am available&amp;quot;               ;;Have custom status message for
                                                           ;;Asterisk.
;timeout=100                                        ;;Timeout on the message stack.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll notice that I&amp;rsquo;ve added the buddy &amp;lsquo;leif@leifmadsen.com&amp;rsquo; manually. In order to be able to send messages to the &amp;lsquo;leif@leifmadsen.com&amp;rsquo; contact, I need to add them to the buddy list in the Asterisk memory. Once Asterisk goes to send a message via the JabberSend() application, then you will get an authorization request. Once the authorization has been granted, then you will be able to get messages.&lt;/p&gt;

&lt;p&gt;Now that we have configured jabber.conf, lets reload the res_jabber module.&lt;/p&gt;

&lt;p&gt;From the Asterisk CLI, run:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;*CLI&amp;gt; module reload res_jabber.so&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then we can verify we have connected to the server correctly by running:&lt;/p&gt;

&lt;p&gt;``` *CLI&amp;gt; jabber show connected
Jabber Users and their status:&lt;/p&gt;

&lt;h2 id=&#34;user-asterisk-leifmadsen-com-connected:2c32ab1144e66d85c54ba20bc922b1fd&#34;&gt;User: asterisk@leifmadsen.com     - Connected&lt;/h2&gt;

&lt;p&gt;Number of users: 1```&lt;/p&gt;

&lt;p&gt;And we can run &lt;code&gt;jabber test&lt;/code&gt; to do a verification everything is OK:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;*CLI&amp;gt; jabber test
User: leif@leifmadsen.com
Resource: linux918E72D1
client: http://pidgin.im/caps
version: 2.5.5
Jingle Capable: 0
Priority: 1
Status: 1
Message:&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Oooh a working message stack!&lt;/p&gt;

&lt;p&gt;Now that everything looks good to go, lets send a message over Jabber!&lt;/p&gt;

&lt;p&gt;From the Dialplan, we need to use the JabberSend() application to send us some information. The example I&amp;rsquo;ll use will send a message whenever someone joins my conference room.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[incoming]
exten =&amp;gt; 7070,1,Verbose(2,${CALLERID(all)} is joining the conference bridge.)
exten =&amp;gt; 7070,n,JabberSend(asterisk,leif@leifmadsen.com,${CALLERID(all)} is joining the conference bridge.)
exten =&amp;gt; 7070,n,MeetMe(7070,d)
exten =&amp;gt; 7070,n,Hangup()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The format for the JabberSend() application is as follows:
* Jabber:  the jabber configuration to use, this is the [name] you configured in jabber.conf
* ScreenName: the screen name of the person you want to send an XMPP message to
* Message: the message you want to send&lt;/p&gt;

&lt;p&gt;And that should be pretty much it! Pretty simple eh?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HowTo: Read a value from a file, and say it back</title>
      <link>http://leifmadsen.github.io/hugo_gh_blog/blog/2009/07/17/howto-read-a-value-from-a-file-and-say-it-back/</link>
      <pubDate>Fri, 17 Jul 2009 17:21:15 +0000</pubDate>
      
      <guid>http://leifmadsen.github.io/hugo_gh_blog/blog/2009/07/17/howto-read-a-value-from-a-file-and-say-it-back/</guid>
      <description>

&lt;h3 id=&#34;preamble:0d635cd39416ed1b6422f4dcd67cbe23&#34;&gt;Preamble&lt;/h3&gt;

&lt;p&gt;Today on the &lt;a href=&#34;http://www.voipusersconference.org/&#34;&gt;VoIP Users Conference&lt;/a&gt; we discussed my request for recipe ideas in order to start developing some additional documentation. Specifically, I&amp;rsquo;m looking for problems that are simple, common problems that can be solved in the dialplan, and which are good examples of the dialplan language (markup, script, yadda yadda).&lt;/p&gt;

&lt;p&gt;One of the suggestions was something posted to the Asterisk mailing list which was pretty straight forward: to read in the contents of a file, where the file contained a number which was the current temperature. This file was created by an external script, and the poster was looking for how to read in the contents of that file, and play back something that would say the number, followed by &amp;ldquo;degrees&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The discussion delved into some possible solutions, and delved into the problem with writing Asterisk recipes in general; that there are always several ways to skin the same cat. Below I will mention some of the examples that had come up on the conference call in the Discussion section, and will then show a dialplan (that works on Asterisk 1.4) that will solve the problem proposed in the Solution section.&lt;/p&gt;

&lt;h3 id=&#34;problem:0d635cd39416ed1b6422f4dcd67cbe23&#34;&gt;Problem&lt;/h3&gt;

&lt;p&gt;To read the contents of a file, where the contents will contain a number, that needs to be read back to the caller, followed by the word &amp;ldquo;degrees&amp;rdquo;.&lt;/p&gt;

&lt;h3 id=&#34;solution:0d635cd39416ed1b6422f4dcd67cbe23&#34;&gt;Solution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[subSayCurrentTemperature]
exten =&amp;gt; start,1,Verbose(2,Saying the current temperature back to channel ${CHANNEL})

; first, lets verify the the file exists for reading in data
exten =&amp;gt; start,n,Set(PATH_TO_FILE=/tmp/current_temp.txt)
exten =&amp;gt; start,n,Set(FILE_STATUS=${STAT(e,${PATH_TO_FILE})})
exten =&amp;gt; start,n,GotoIf($[&amp;quot;${FILE_STATUS}&amp;quot; = &amp;quot;&amp;quot; | &amp;quot;${FILE_STATUS}&amp;quot; = &amp;quot;0&amp;quot;]?no_file,1)

; next lets read in the value from the file since it exists
exten =&amp;gt; start,n,Set(MAX_FILE_CHARACTERS=256)
exten =&amp;gt; start,n,ReadFile(TEMPERATURE=${PATH_TO_FILE},${MAX_FILE_CHARACTERS})
exten =&amp;gt; start,n,GotoIf($[${ISNULL(${TEMPERATURE})}]?no_file,1)                               ; verify we got a value

; say the temperature
exten =&amp;gt; start,n,Playback(silence/1)
exten =&amp;gt; start,n,SayNumber(${TEMPERATURE})
exten =&amp;gt; start,n,Playback(en/degrees&amp;amp;en;/fahrenheit)
exten =&amp;gt; start,n,Return()

exten =&amp;gt; no_file,1,Verbose(2,File does not exist)
exten =&amp;gt; no_file,n,Playback(silence/1)
exten =&amp;gt; no_file,n,Playback(en/feature-not-avail-line)
exten =&amp;gt; no_file,n,Return()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then you can setup some sort of test number that will call the subroutine (I&amp;rsquo;m using &lt;code&gt;GoSub()&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[incoming]
exten =&amp;gt; 555,1,Verbose(2,Checking temperature)
exten =&amp;gt; 555,n,GoSub(subSayCurrentTemperature,start,1)
exten =&amp;gt; 555,n,Hangup()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;discussion:0d635cd39416ed1b6422f4dcd67cbe23&#34;&gt;Discussion&lt;/h3&gt;

&lt;p&gt;The solution above is really the &amp;ldquo;right&amp;rdquo; way to do it in Asterisk. But with Asterisk, there always seems to be many &amp;ldquo;right&amp;rdquo; ways to solve the same solution. Because the problem was to read in the contents of a file and to say the contents back, then the solution I provided certainly solves that problem directly in dialplan without any external scripts, or dropping to the console.&lt;/p&gt;

&lt;p&gt;There were several other solutions that could have been provided for this solution since there was an external PHP script that was generating the file and its contents. That script could have done any of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Execute a shell command, and write the contents to the Asterisk database: &lt;code&gt;asterisk -rx &amp;quot;database put temperature current 60&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Write the contents to a relational database such as MySQL and use func_odbc:  &lt;code&gt;Set(TEMPERATURE=${ODBC_TEMP()})&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Setup a webpage and parse it with curl: &lt;code&gt;Set(TEMPERATURE=${CURL(http://website.tld/temperature.php)})&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;On Asterisk 1.6, there is the SHELL() function: &lt;code&gt;Set(TEMPERATURE=${SHELL(cat /tmp/current_temperature.txt)})&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I particularly like the curl solution since it allows the script to lookup the temperature when the CURL() function calls it, which means it can be real time and not delayed like writing to a text file can be.&lt;/p&gt;

&lt;p&gt;So like with all things Asterisk, there are always many inventive ways to solve the same solution.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HowTo: Page() all users, other than current channel</title>
      <link>http://leifmadsen.github.io/hugo_gh_blog/blog/2009/07/15/howto-page-all-users-other-than-current-channel/</link>
      <pubDate>Wed, 15 Jul 2009 18:29:02 +0000</pubDate>
      
      <guid>http://leifmadsen.github.io/hugo_gh_blog/blog/2009/07/15/howto-page-all-users-other-than-current-channel/</guid>
      <description>&lt;p&gt;I was asked on IRC by bhodder how to Page() all users, other than the current channel (i.e. he had a list of people to call, but one of the channels listed could be the person paging, and he didn&amp;rsquo;t want them paged).&lt;/p&gt;

&lt;p&gt;So I wrote up the following little dialplan script which takes the list of users, and compares it against the current channel, and simply rebuilds the list without the current channel in it prior to calling the Page() application.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;exten =&amp;gt; start,1,NoOp()

; all users we want to page (potentially)
exten =&amp;gt; start,n,Set(ALL_USERS_TO_PAGE=SIP/100&amp;amp;SIP;/101&amp;amp;SIP;/102)

; what is our channel name? (without the unique bit)
exten =&amp;gt; start,n,Set(CURRENT_CHANNEL=${CUT(CHANNEL,-,1)})

; initialize loop counter
exten =&amp;gt; start,n,Set(LOOP_COUNT=1)
exten =&amp;gt; start,n,Set(WORKING_USER=${CUT(ALL_USERS_TO_PAGE,&amp;amp;,${LOOP_COUNT})})

; while we still have values, loop
exten =&amp;gt; start,n,While($[&amp;quot;${WORKING_USER}&amp;quot; != &amp;quot;&amp;quot;])

; if the working user is the current user, do not add them
exten =&amp;gt; start,n,GotoIf($[&amp;quot;${WORKING_USER}&amp;quot; = &amp;quot;${CURRENT_CHANNEL}&amp;quot;]?skip_add_user)

; if users to page is not null, then prefix with ampersand
exten =&amp;gt; start,n,Set(USERS_TO_PAGE=${IF($[&amp;quot;${USERS_TO_PAGE}&amp;quot; = &amp;quot;&amp;quot;]?${WORKING_USER}:${USERS_TO_PAGE}&amp;amp;${WORKING_USER})})
exten =&amp;gt; start,n(skip_add_user),NoOp()

; increment loop
exten =&amp;gt; start,n,Set(LOOP_COUNT=$[${LOOP_COUNT} + 1])

; get new working user
exten =&amp;gt; start,n,Set(WORKING_USER=${CUT(ALL_USERS_TO_PAGE,&amp;amp;,${LOOP_COUNT})})
exten =&amp;gt; start,n,EndWhile()

; page users
exten =&amp;gt; start,n,Page(${USERS_TO_PAGE})
exten =&amp;gt; start,n,Hangup()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Essentially how it works is to take the ${ALL_USERS_TO_PAGE} variable and use the CUT() function to check each of the fields (which are separated by an ampersand (&amp;amp;)), and to compared that to the ${CURRENT_CHANNEL} variable, which is taking the ${CHANNEL} variable, and stripping off the unique bit of the string (i.e. SIP/100-44adf43p) to compare that with the ${WORKING_CHANNEL} variable (which contains the value of field ${LOOP_COUNTER}, where ${LOOP_COUNTER} is field number 1 through 3).&lt;/p&gt;

&lt;p&gt;The While() checks to make sure we still have a value, and when we don&amp;rsquo;t, we exit (i.e. ${LOOP_COUNTER} will contain 4, and field 4 will be blank).&lt;/p&gt;

&lt;p&gt;Once we&amp;rsquo;ve rebuilt our string ${USERS_TO_PAGE}, we exit the loop, and use that in the Page() application. If all goes well, we should only page the users who are not us :)&lt;/p&gt;

&lt;p&gt;This was created for a user and not tested by me. If you have any issues, leave a comment, and I&amp;rsquo;ll update the code with anything that doesn&amp;rsquo;t work. If this works first try, I&amp;rsquo;ll be shocked and very happy!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>