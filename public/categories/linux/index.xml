<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on Asterisk, and other worldly endeavours</title>
    <link>http://blog.leifmadsen.com/categories/linux/index.xml</link>
    <description>Recent content in Linux on Asterisk, and other worldly endeavours</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Finding available Ansible tags in playbooks and roles</title>
      <link>http://blog.leifmadsen.com/blog/2017/01/04/finding-available-ansible-tags-in-playbooks-and-roles/</link>
      <pubDate>Wed, 04 Jan 2017 15:42:23 -0500</pubDate>
      
      <guid>http://blog.leifmadsen.com/blog/2017/01/04/finding-available-ansible-tags-in-playbooks-and-roles/</guid>
      <description>&lt;p&gt;Today I went down a yak shaving path trying to figure out how to get all the
available tags in a fairly complicated plethora of Ansible playbooks and roles.
One of these such situations involves TripleO Quickstart, which is made up of
several different playbooks and repositories of different roles.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Installing Python 2.7 on CentOS 6.x</title>
      <link>http://blog.leifmadsen.com/blog/2017/01/03/installing-python-2.7-on-centos-6.x/</link>
      <pubDate>Tue, 03 Jan 2017 14:34:38 -0500</pubDate>
      
      <guid>http://blog.leifmadsen.com/blog/2017/01/03/installing-python-2.7-on-centos-6.x/</guid>
      <description>&lt;p&gt;I recently had a need to install Python 2.7 on an older CentOS 6 machine since
I wanted to generate some SSL certificates for my web server. On CentOS 6, then
default Python installation is 2.6, which doesn&amp;rsquo;t seem to work for Let&amp;rsquo;s
Encrypt.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Creating virtual machines in libvirt with virt-install</title>
      <link>http://blog.leifmadsen.com/blog/2016/12/16/creating-virtual-machines-in-libvirt-with-virt-install/</link>
      <pubDate>Fri, 16 Dec 2016 14:36:23 -0500</pubDate>
      
      <guid>http://blog.leifmadsen.com/blog/2016/12/16/creating-virtual-machines-in-libvirt-with-virt-install/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been wanting to automate my virtual machine instantiation for a while now,
but I&amp;rsquo;ve always hated the idea of having to spin up multiple bits of
infrastruction to deal with PXE booting, web server to host a kickstart file,
etc. Luckily, I ran into some stuff today, and figured out how to automate
virtual machine instantitation without having to resort to anything outside of
localhost.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Initial Fedora libvirt Setup</title>
      <link>http://blog.leifmadsen.com/blog/2016/12/16/initial-fedora-libvirt-setup/</link>
      <pubDate>Fri, 16 Dec 2016 10:30:35 -0500</pubDate>
      
      <guid>http://blog.leifmadsen.com/blog/2016/12/16/initial-fedora-libvirt-setup/</guid>
      <description>&lt;p&gt;There are always a few things I need to do to get libvirt working with a
non-root user on Fedora that I need to do, and typically results in some Google
researching. Here are some notes of what I recently did to get my libvirt setup
going on a new Fedora 25 installation and working with a non-root user.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Create network bridge with nmcli for libvirt</title>
      <link>http://blog.leifmadsen.com/blog/2016/12/01/create-network-bridge-with-nmcli-for-libvirt/</link>
      <pubDate>Thu, 01 Dec 2016 14:51:52 -0500</pubDate>
      
      <guid>http://blog.leifmadsen.com/blog/2016/12/01/create-network-bridge-with-nmcli-for-libvirt/</guid>
      <description>&lt;p&gt;In order to get libvirt working properly with bridged networking, we first need
to configure our local network to have network bridge slaved to our wired
ethernet adapter. I don&amp;rsquo;t have to set this up too often (as once I do, it just
sits there running happily). Here are some basic steps I did to get this going
locally.
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TripleO: Consuming Composable Roles</title>
      <link>http://blog.leifmadsen.com/blog/2016/10/03/tripleo-consuming-composable-roles/</link>
      <pubDate>Mon, 03 Oct 2016 15:34:08 -0400</pubDate>
      
      <guid>http://blog.leifmadsen.com/blog/2016/10/03/tripleo-consuming-composable-roles/</guid>
      <description>&lt;p&gt;So last week I started to look into learning the new &lt;a href=&#34;http://hardysteven.blogspot.ca/2016/08/tripleo-composable-services-101.html&#34;&gt;composable services and
roles&lt;/a&gt;
that was added to Newton. I previously learned a little bit about deploying
OpenStack clouds when I did training after joining Red Hat, but that was based
on Liberty, and a lot has changed in TripleO since that time.

The first thing was learning what composable services and roles are, and
generally what they are intended to solve. I don&amp;rsquo;t want to get into that
here, so I&amp;rsquo;d encourage you to go read some links first and then come back here.
Additionally, it&amp;rsquo;s assumed you know what a TripleO is :)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Console Obsession</title>
      <link>http://blog.leifmadsen.com/blog/2016/09/27/a-console-obsession/</link>
      <pubDate>Tue, 27 Sep 2016 16:11:17 -0400</pubDate>
      
      <guid>http://blog.leifmadsen.com/blog/2016/09/27/a-console-obsession/</guid>
      <description>&lt;p&gt;Recently I&amp;rsquo;ve gotten into running as many of my day-to-day applications in a
Linux console. Thought I&amp;rsquo;d briefly share the applications I&amp;rsquo;ve been playing
with.
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
