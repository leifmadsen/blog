<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Asterisk, and other worldly endeavours</title>
    <link>http://leifmadsen.github.io/hugo_gh_blog/categories/docker/</link>
    <description>Recent content in Docker on Asterisk, and other worldly endeavours</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Nov 2015 19:41:55 -0500</lastBuildDate>
    <atom:link href="http://leifmadsen.github.io/hugo_gh_blog/categories/docker/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Asterisk Docker Container: Phase 1</title>
      <link>http://leifmadsen.github.io/hugo_gh_blog/blog/2015/11/10/asterisk-docker-container-phase-1/</link>
      <pubDate>Tue, 10 Nov 2015 19:41:55 -0500</pubDate>
      
      <guid>http://leifmadsen.github.io/hugo_gh_blog/blog/2015/11/10/asterisk-docker-container-phase-1/</guid>
      <description>&lt;p&gt;At AstriCon 2015 this year, there was a lot (and I mean a lot) of discussion around microservices (Docker),
and what items are required over the next year by the development community in order to make Asterisk better
suited to running in that environment.&lt;/p&gt;

&lt;p&gt;One of the first things is, clearly, to have a container image that Asterisk runs in. I&amp;rsquo;ve done this a
few times now, but having something that can be passed over to the official Asterisk Git repository,
and which everyone can contribute to, utilize and play with would be the goal here. The community is
already pretty fragmented, and there are a bunch of useful, but unofficial images, and I don&amp;rsquo;t think
any of them have become the defacto image.&lt;/p&gt;

&lt;p&gt;Part of the problem is really around packages. Digium does release some official Asterisk packages, but
it&amp;rsquo;s not automated. Another interesting tidbit that came out of AstriDevCon is that no one really uses packages.&lt;/p&gt;

&lt;p&gt;Let me elaborate on what I mean by that. Everyone seems to want packages of the project. The issue seems
to be that anyone using packages probably already has access to them through their distribution. If they
don&amp;rsquo;t want or can&amp;rsquo;t use those packages, then they are likely using some sort of custom deployment, in
which case they are probably compiling Asterisk onto the box in question, along with their custom patches.&lt;/p&gt;

&lt;p&gt;We need to figure out an easier way for people to have access to custom packages.&lt;/p&gt;

&lt;p&gt;With that in mind, we also want people to have access to an Asterisk container image that they can use,
but with the ability to rebuild it locally if need be, without having to setup a ton of infrastructure to
do it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker container results in x509: failed to load system roots and no roots provided</title>
      <link>http://leifmadsen.github.io/hugo_gh_blog/blog/2015/10/30/docker-container-results-in-x509-failed-to-load-system-roots-and-no-roots-provided/</link>
      <pubDate>Fri, 30 Oct 2015 20:30:27 +0000</pubDate>
      
      <guid>http://leifmadsen.github.io/hugo_gh_blog/blog/2015/10/30/docker-container-results-in-x509-failed-to-load-system-roots-and-no-roots-provided/</guid>
      <description>&lt;p&gt;We have a small system running in AWS as a CentOS 7 image. It has a few containers that we&amp;rsquo;re using to host a few Golang API proxies. We migrated a customers API proxy that was running on the local VM into a container, and spun it up. Upon testing, we ran into the following error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x509: failed to load system roots and no roots provided
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We get that failure when trying to connect to an HTTPS endpoint (remote API that we&amp;rsquo;re proxying to Asterisk).&lt;/p&gt;

&lt;p&gt;Figured it had to do with the fact we were using a scratch disk to build the container image, and that there were no certs loaded. Did some Googling and found some people with similar problems, but their solutions didn&amp;rsquo;t work for us on our CentOS 7 host system.&lt;/p&gt;

&lt;p&gt;Then I thought maybe there was some issue with following a symlink as the source since we were loading in the &lt;code&gt;ca-bundle.crt&lt;/code&gt; file as a volume. I didn&amp;rsquo;t test enough to determine if that was the issue (it probably wasn&amp;rsquo;t), but this post gave me a hint:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/docker/docker/issues/5157#issuecomment-69325677&#34;&gt;https://github.com/docker/docker/issues/5157#issuecomment-69325677&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So we did the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d -p 8085:8085 -v /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem:/etc/ssl/certs/ca-certificates.crt [etc...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After linking that file and mounting it in the container, all was well. I suspect it&amp;rsquo;s the path to the &lt;code&gt;ca-certificates.crt&lt;/code&gt; that was the real trick.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>