<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Automation on Asterisk, and other worldly endeavours</title>
    <link>http://blog.leifmadsen.com/categories/automation/</link>
    <description>Recent content in Automation on Asterisk, and other worldly endeavours</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Nov 2015 19:41:55 -0500</lastBuildDate>
    <atom:link href="http://blog.leifmadsen.com/categories/automation/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Asterisk Docker Container: Phase 1</title>
      <link>http://blog.leifmadsen.com/blog/2015/11/10/asterisk-docker-container-phase-1/</link>
      <pubDate>Tue, 10 Nov 2015 19:41:55 -0500</pubDate>
      
      <guid>http://blog.leifmadsen.com/blog/2015/11/10/asterisk-docker-container-phase-1/</guid>
      <description>

&lt;h2 id=&#34;astricon:edca0defca2eee89975749feb87dffb1&#34;&gt;AstriCon&lt;/h2&gt;

&lt;p&gt;At AstriCon 2015 this year, there was a lot (and I mean a lot) of discussion around microservices (Docker),
and what effort is required over the next year by the development community in order to make Asterisk better
suited to running in that environment.&lt;/p&gt;

&lt;p&gt;One of the first things is, clearly, to have a container image that Asterisk runs in. I&amp;rsquo;ve done this a
few times now, but having something that can be passed over to the official Asterisk Git repository,
and which everyone can contribute to, utilize and play with would be the goal here. The community is
already pretty fragmented, and there are a bunch of useful, but unofficial images, and I don&amp;rsquo;t think
any of them have become the defacto image.&lt;/p&gt;

&lt;h2 id=&#34;the-problem-reproducibility:edca0defca2eee89975749feb87dffb1&#34;&gt;The Problem; Reproducibility&lt;/h2&gt;

&lt;p&gt;Part of the problem is really around packages. Digium does release some official Asterisk packages, but
it&amp;rsquo;s not automated. Another interesting tidbit that came out of AstriDevCon is that no one really uses packages.&lt;/p&gt;

&lt;p&gt;Let me elaborate on what I mean by that. Steve Sokol actually made that statement, and at first I was shocked.
As he talked a bit more, there was a bit of an a-ha moment, so let me try and distill it. Remember that we&amp;rsquo;re in
a room of developers and highly skillful integrators. When Steve said, &amp;ldquo;no one uses packages&amp;rdquo;, he was referring
to a poll that was done of developers and integrators, and asking if they deploy their systems to customers using
the defacto packages that are provided with the various distributions.&lt;/p&gt;

&lt;p&gt;The issue isn&amp;rsquo;t that we don&amp;rsquo;t have access to packages, but that the packages we do have access to don&amp;rsquo;t contain
the various bits of custom code that developers and highly skilled integrators tend to absorb and deploy. So what
ultimately happens is that code gets compiled on the system with the changes, and away everyone goes.&lt;/p&gt;

&lt;p&gt;Of course these same people are more than intelligent enough to handle their own packaging. The issue tends to be
that creating your own packages and managing them is a bit of a pain in the ass. It&amp;rsquo;s extra overhead that never
seems to ultimately bubble up to a high enough priority to solve (in many cases). No one likes shaving yaks to get
their work done.&lt;/p&gt;

&lt;p&gt;So with that sidebar out of the way, let me ask a question: how does building an &amp;ldquo;official&amp;rdquo; Docker image solve
any of that? The answer is, it doesn&amp;rsquo;t. We end up in the exact same situation, with everyone having their own
Docker images and their own Dockerfile that as borrowed from someone else, and we end up with community
fragmentation.&lt;/p&gt;

&lt;h2 id=&#34;approaching-a-solution:edca0defca2eee89975749feb87dffb1&#34;&gt;Approaching A Solution&lt;/h2&gt;

&lt;p&gt;I think there is a solution here though. Docker makes the building of utility services significantly easier than
someone having to install applications, spin up the corresponding services, configure them, and ultimately host
them on their infrastructure. And we&amp;rsquo;re not even talking yet about people who run Ubuntu vs CentOS vs Debian vs
Mint vs&amp;hellip; Gentoo?&lt;/p&gt;

&lt;p&gt;However, the underlying distribution in a Docker-based infrastructure becomes much less of a concern. We have
these nice abstraction points called &amp;ldquo;containers&amp;rdquo; :) With the framework of a single container, the distribution
can be one type, and it can interact with other containers that are other distribution types through things like
volumes, networking, etc. We can also distribute portions of the infrastructure into nice little container images
with minimal setup time for the infrastructure owner.&lt;/p&gt;

&lt;p&gt;With one or more containers, we can easily distribute the functionality that would normally be maintained by each
person locally, and make the maintenance of that functionality a bit more centralized through the distribution of
containers for each of those purposes. Then the only real documentation should be how to use the containers to
achieve the same goals as would be done in a virtual machine installation. Ideally with significantly less investment
of time as well.&lt;/p&gt;

&lt;p&gt;The goal then here, is to create a foundation that allows the building of Asterisk and distributing it via a
container image relatively simple. We can then avoid any centralized infrastructure spin up that needs to be owned
by a single organization or individual, allowing collaboration across organizations and developers, and also allowing
everyone to have a slightly tweaked deployment without the overhead of maintaining the entire stack.&lt;/p&gt;

&lt;h2 id=&#34;a-draft-solution:edca0defca2eee89975749feb87dffb1&#34;&gt;A Draft Solution&lt;/h2&gt;

&lt;p&gt;With that in mind, we also want people to have access to an Asterisk container image that they can use,
but with the ability to rebuild it locally if need be, without having to setup a ton of infrastructure to
do it. As a first step, it would be ideal to just have something that is reproducible.&lt;/p&gt;

&lt;p&gt;The simplest solution is really just to build Asterisk from source that is mounted via volume into the container
during build. While this definitely solves multple problems, it provides its own set of obstacles. Primarily that
it results in a large number of dependencies built into the container which results in a large container image.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: There are ways around this, but it kind of breaks the simplicity of the &lt;code&gt;Dockerfile&lt;/code&gt; when you break out
information into external scripts. Externalizing everything also breaks the readability of the container build
itself when you do a &lt;code&gt;docker inspect&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The best way of building the Asterisk container image is to use packages, since that doesn&amp;rsquo;t increase the size of
the distributed container image. It also keeps the &lt;code&gt;Dockerfile&lt;/code&gt; readable and a single layer of information. But
now we&amp;rsquo;re right back to our &amp;ldquo;building packages is hard&amp;rdquo; issue. Luckily with Docker we can make this a significantly
more appealing a process.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Since I started working on this, Alan Graham posted some links to RPM building containers which might
also be useful for this. I&amp;rsquo;m currently approaching this slightly differently, but there may be an opportunity
to circle back around and see how these images could also be used to solve the problem:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alanfranz/docker-rpm-builder&#34;&gt;https://github.com/alanfranz/docker-rpm-builder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alanfranz/fpm-within-docker&#34;&gt;https://github.com/alanfranz/fpm-within-docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;In my first approach, I didn&amp;rsquo;t want to rewrite all the SPEC file madness for Asterisk. That&amp;rsquo;s a big job. I&amp;rsquo;ve
previously built RPMs for Asterisk (many times) using the
&lt;a href=&#34;http://pkgs.fedoraproject.org/cgit/asterisk.git/&#34;&gt;asterisk.spec file&lt;/a&gt; from the Fedora project. It&amp;rsquo;s a great
starting point, and usually with some mild tweaking I can get what I want out of it. The most typical thing
I do is add my own custom changes to the &lt;code&gt;.spec&lt;/code&gt; file, change versions, maintainer, etc and then build the RPMs
with &lt;a href=&#34;https://fedoraproject.org/wiki/Mock&#34;&gt;mock&lt;/a&gt;. This is better than having a dependent VM or something for
building the RPMs, but it still requires knowledge of using &lt;code&gt;mock&lt;/code&gt; and then of course modifying the &lt;code&gt;spec&lt;/code&gt;
files in the first place. You also need to have a Fedora or CentOS machine to work on.&lt;/p&gt;

&lt;p&gt;We can simplify this with a Docker container image that builds the RPMs for us. I did that here:
&lt;a href=&#34;https://github.com/leifmadsen/asterisk-docker-builder/tree/0.1&#34;&gt;asterisk-docker-builder version 0.1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The solution I took was to reuse some of the RPM building tools supplied by the Fedora project. Using
&lt;code&gt;fedpkg&lt;/code&gt; I could generate the dependencies I required, load them into a local repo, and use that to step
through the dependency stack. With the &lt;code&gt;.spec&lt;/code&gt; files already created, there wasn&amp;rsquo;t much extra work to do since
I could install dependencies with &lt;code&gt;yum-builddep&lt;/code&gt; and then use &lt;code&gt;createrepo&lt;/code&gt; to build a local RPM repository
that could host the dependencies not available from upstream CentOS.&lt;/p&gt;

&lt;p&gt;You can see that I somewhat break my own rule and use a &lt;code&gt;buildit.sh&lt;/code&gt; script, but since this was just for the
RPM builder, I let it slide for now. The resulting RPMs are then used during the build process for the Asterisk
container image. This results in a huge savings of space; with the compiled version of the Docker image, the
size was 1.6GB, but with RPMs, it is closer to 500MB.&lt;/p&gt;

&lt;h2 id=&#34;outstanding-issues:edca0defca2eee89975749feb87dffb1&#34;&gt;Outstanding Issues&lt;/h2&gt;

&lt;p&gt;I consider the solution I&amp;rsquo;ve been working on far from complete. In this blog post I also don&amp;rsquo;t get into
how I solved all the little things, and how to use the images (I think I did a decent version of that in
the &lt;code&gt;README.md&lt;/code&gt; file within the Github repo). Here are a few of the problems yet to be solved:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;dependency on the upstream &lt;code&gt;spec&lt;/code&gt; file from Fedora&lt;/li&gt;
&lt;li&gt;dependency on &lt;code&gt;fedpkg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;inability to build packages easily from local source&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let me break down a bit further why the above are issues.&lt;/p&gt;

&lt;h3 id=&#34;dependency-on-upstream-spec:edca0defca2eee89975749feb87dffb1&#34;&gt;Dependency on upstream &lt;code&gt;spec&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;When we rely on the upstream &lt;code&gt;spec&lt;/code&gt; file, we&amp;rsquo;re not really a lot further ahead. Sure we have the ability to reproduce
builds pretty easily, but to a certain degree we&amp;rsquo;re stuck with whatever version is being packaged upstream. The file not
being local makes it difficult to manage, so we&amp;rsquo;re kind of back to building packages ourselves.&lt;/p&gt;

&lt;h3 id=&#34;dependency-on-fedpkg:edca0defca2eee89975749feb87dffb1&#34;&gt;Dependency on &lt;code&gt;fedpkg&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;A dependency on &lt;code&gt;fedpkg&lt;/code&gt; is actually a nice thing to a certain degree, but doesn&amp;rsquo;t solve all our &amp;ldquo;build from local source&amp;rdquo;
problems. With &lt;code&gt;fedpkg&lt;/code&gt; the default is to grab the &lt;code&gt;spec&lt;/code&gt; file and sources from a server hosted via Fedora itself (thus we&amp;rsquo;re)
building the same RPMs that Fedora ships with their systems), but there is an override configuration file we can use. With
the override configuration file, we could actually point at our own &lt;code&gt;spec&lt;/code&gt; file hosted in &lt;code&gt;git&lt;/code&gt; and also point at our own
&lt;code&gt;sources&lt;/code&gt; location, where our own tarball of Asterisk resides (with our own changes).&lt;/p&gt;

&lt;p&gt;Of course this goes back to having to deploy our own infrastructure to support building packages. It&amp;rsquo;s not ideal, but it&amp;rsquo;s
definitely much less than normal. I think there are things we can do with companion containers though to make this much
more flexible. There might be other tools that are even better than &lt;code&gt;fedpkg&lt;/code&gt; to make the building simpler.&lt;/p&gt;

&lt;h3 id=&#34;inability-to-build-from-local-source:edca0defca2eee89975749feb87dffb1&#34;&gt;Inability to build from local source&lt;/h3&gt;

&lt;p&gt;Right now we technically could build packages using the &lt;code&gt;fedpkg.conf&lt;/code&gt; overrides and point it at some other
infrastructure (either self-hosted, or supplied via companion containers). The primary issue is if you wanted
to build a development container for testing some code directly from your local source directory without all
the extra work of building tarballs, uploading them to a remote server, and updating a &lt;code&gt;spec&lt;/code&gt; file, you&amp;rsquo;re kind
of out of luck.&lt;/p&gt;

&lt;h2 id=&#34;next-steps:edca0defca2eee89975749feb87dffb1&#34;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;I think at this point some additional work could be done here to make this all a little less difficult. For
example the usage of &lt;a href=&#34;https://github.com/jordansissel/fpm&#34;&gt;FPM&lt;/a&gt; within a companion container could make the
creation of the packages much simpler. If that approach succeeds then we skip a lot of the overhead of having
to maintain &lt;code&gt;spec&lt;/code&gt; files, outside infrastructure to make the files available to &lt;code&gt;fedpkg&lt;/code&gt; and a few other things
that make building packages annoying. It&amp;rsquo;s not clear yet whether FPM really works well for complex applications
like Asterisk that have multiple outside dependencies, but it&amp;rsquo;s worth a look.&lt;/p&gt;

&lt;p&gt;The other approach I&amp;rsquo;ve been thinking about is to have a &lt;code&gt;spec&lt;/code&gt; file per Asterisk version supplied directly
with Asteris, which makes the editing of the file locally probably a lot simpler since it&amp;rsquo;ll be tied to your
base version of Asterisk. From there you simply need to add any extra modules / files that you&amp;rsquo;re adding to the
Asterisk source code. If changes only happen in existing file, then there should be no need to change the file
at all, other than maybe a build flag change (which you might be able to pass in with an &lt;code&gt;ENV&lt;/code&gt; variable).&lt;/p&gt;

&lt;p&gt;To solve the issue with building a package from the local source, we could volume mount the working directory
or Asterisk code back into the container during the &lt;code&gt;docker run&lt;/code&gt; and &lt;code&gt;tar&lt;/code&gt; the source up, place the resulting
archive into a particular directory, update the signature file, and create a new RPM. Building your own local
Asterisk container then would be relatively straight forward.&lt;/p&gt;

&lt;h2 id=&#34;conclusion:edca0defca2eee89975749feb87dffb1&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I know this has been a lengthy post, but I wanted to get all the background fleshed out so that anyone wanting
to jump into this had the prerequisite information. I have some approaches I&amp;rsquo;m going to attempt moving forward
with (likely FPM to start, since I think that creates a simple avenue if it works out), but anyone who wanted
to assist with this is more than welcome to get with me, and provide some other information.&lt;/p&gt;

&lt;p&gt;Maybe there are some simple tweaks I&amp;rsquo;m not seeing, or some other problem to be solved that I haven&amp;rsquo;t run into yet.
The goal here is to get the requisite &lt;code&gt;Dockerfile&lt;/code&gt; or files into the Asterisk repository, add some documentation
and make it simple for people to build their own Asterisk containers with their source. Of course if all you
need is a vanilla Asterisk container right now, I&amp;rsquo;m already hosting one from the resulting RPMs built by the
Fedora projects &lt;code&gt;spec&lt;/code&gt; and &lt;code&gt;fedpkg&lt;/code&gt; at the &lt;a href=&#34;https://hub.docker.com/r/leifmadsen/asterisk/&#34;&gt;Docker Hub&lt;/a&gt; under my
repository.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>