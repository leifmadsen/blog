<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on Asterisk, and other worldly endeavours</title>
    <link>http://blog.leifmadsen.com/categories/development/</link>
    <description>Recent content in Development on Asterisk, and other worldly endeavours</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Nov 2015 10:21:26 -0500</lastBuildDate>
    <atom:link href="http://blog.leifmadsen.com/categories/development/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Rules For The Greater Goodness; A Product Development Guide</title>
      <link>http://blog.leifmadsen.com/blog/2015/11/19/rules-for-the-greater-goodness-a-product-development-guide/</link>
      <pubDate>Thu, 19 Nov 2015 10:21:26 -0500</pubDate>
      
      <guid>http://blog.leifmadsen.com/blog/2015/11/19/rules-for-the-greater-goodness-a-product-development-guide/</guid>
      <description>

&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;

&lt;p&gt;This page documents and provides bullets about the way to approach (or avoid) building products. These are lessons we&amp;rsquo;ve learned from previous encounters and which we wish to avoid in the future. By sticking firmly to these development rules, we avoid getting bogged down in complete system rearchitectures in the future. The means to a scaled end is to approach the first customer as all your customers.&lt;/p&gt;

&lt;h1 id=&#34;rules-for-the-greater-goodness&#34;&gt;Rules For The Greater Goodness&lt;/h1&gt;

&lt;h2 id=&#34;a-product-development-guide&#34;&gt;A Product Development Guide&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Java is strictly forbidden&lt;/strong&gt; from any client or server side applications being built or interacted with. Applications utilizing Java may be used in limited usage when warranted.

&lt;ul&gt;
&lt;li&gt;For example, Confluence, our documentation system utilized Java, but no customer interactions are had via Java, and no core systems utilize Java.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rube-Goldberg mechanisms are strictly forbidden.&lt;/strong&gt; Build simpler, more elegant solutions that scale, are documented, and utilize best practices.&lt;/li&gt;
&lt;li&gt;Utilize development tools and languages that speak to the strengths of the system being built. Prefer using languages already in use. Have a primary development language.&lt;/li&gt;
&lt;li&gt;If you can interact with an &lt;strong&gt;API&lt;/strong&gt;, do it. If you need to expose data to another subsystem, front it with an API.&lt;/li&gt;
&lt;li&gt;Love documentation. Be one with documentation. &lt;strong&gt;Document&lt;/strong&gt; your code for the next fool that needs to work on it. It&amp;rsquo;s probably going to be you.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automate everything&lt;/strong&gt; you can so you can spend time building new functionality.&lt;/li&gt;
&lt;li&gt;Build in as much &lt;strong&gt;redundancy&lt;/strong&gt; and automatic &lt;strong&gt;failover&lt;/strong&gt; as possible. Capture errors in sane manners. The focus is to build systems that require very little support. Support costs money.&lt;/li&gt;
&lt;li&gt;If you have a choice between a pre-paid solution and an open source solution, but the open source solution requires more effort, it doesn&amp;rsquo;t matter. &lt;strong&gt;Use open source software.&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Avoid vendor lock&lt;/strong&gt; in at all costs. It costs!&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Load testing&lt;/strong&gt; is paramount, and realistic load testing even more so.  If you don&amp;rsquo;t know the loads at which your application will break you can&amp;rsquo;t know what customer experiences will be like.

&lt;ul&gt;
&lt;li&gt;If you don&amp;rsquo;t know the expected load, how do you expect to monitor it? How will you know what your thresholds are for warning and critical alarms?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Monitor&lt;/strong&gt; your network and applications. Understand what they are doing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Log your data.&lt;/strong&gt; Log your network traffic, your application logs, and your API interactions. Provide a simple interface for gathering data. Don&amp;rsquo;t rely on trying to reproduce issue after the fact.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Have style.&lt;/strong&gt; When possible write a style guide for what you&amp;rsquo;re building. Keeping things clean will produce better code in the future. If your code is pretty and conforms to code guidelines you&amp;rsquo;re less likely to hack and slash. Follow the style guides.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Contribute.&lt;/strong&gt; Using open-source projects is a two-way street. Any contributions we can make back to the community helps both the project and us.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Normalize&lt;/strong&gt; your database tables. Database creation should strive towards fifth normal form (5NF). See &lt;a href=&#34;http://en.wikipedia.org/wiki/Fifth_normal_form&#34;&gt;Fifth Normal Form&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Control the applications.&lt;/strong&gt; Don&amp;rsquo;t deploy applications to clients that you can&amp;rsquo;t control and upgrade. Subscribing to a hosted mentality is that you have a single application for all clients. Own this and everyone will benefit from the same platform.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Limit Customization.&lt;/strong&gt; If you&amp;rsquo;re going to build the functionality for a client, make sure the time you&amp;rsquo;re spending is helping the greater good. Architect and develop features requested by clients in such a way that they are generic and help the greater community (your client base).

&lt;ul&gt;
&lt;li&gt;Small customizations derail your forward momentum and take you on tangents.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sell what you have.&lt;/strong&gt; Don&amp;rsquo;t sell what the customer wants and lock yourself into having to build functionality in a rush. Sell the merits of the platform to the customer and help them understand why a customization for them hurts other customers on the platform, and that you don&amp;rsquo;t want to hurt your customers; including them. See 15 and 16.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;User experience&lt;/strong&gt; is paramount. It should be well researched and designed with ease-of-use in mind. Engineers should never try to directly implement UX concepts; well-designed software should always be abstracted from design elements.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Set reasonable and hard limits&lt;/strong&gt; for expectations of the platform. Don&amp;rsquo;t allow the platform or any of its features to be misrepresented or misconstrued. See 17.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Constant innovation&lt;/strong&gt; is imperative to the success of the platform. No one wants old technology and all technology becomes obsolete almost immediately.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Never ignore customer feedback!&lt;/strong&gt; Even if it&amp;rsquo;s not feasible to implement a customer&amp;rsquo;s request, the request is generally always coming from an actual use-case.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Examine and understand use-cases.&lt;/strong&gt; Always make sure the use-case is understood so that a proper solution can be implemented.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>